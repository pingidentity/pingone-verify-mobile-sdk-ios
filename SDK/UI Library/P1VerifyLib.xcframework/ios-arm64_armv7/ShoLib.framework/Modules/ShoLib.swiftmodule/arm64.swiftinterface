// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 effective-4.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.1 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name ShoLib
import AVFoundation
import AudioToolbox
import CoreImage
import CoreMedia
import Foundation
import ImageIO
import LocalAuthentication
import P1VerifyIDSchema
@_exported import ShoLib
import Swift
import UIKit
public enum SCFaceDetectorError : Swift.Error {
  case FailedToInitialize(message: Swift.String)
  case IllegalArgument(message: Swift.String)
  case Unknown(message: Swift.String? = nil, cause: Swift.Error? = nil)
}
extension SCFaceDetectorError {
  public var localizedDescription: Swift.String {
    get
  }
}
extension UIImage {
  public static func named(_ name: Swift.String, in bundle: Foundation.Bundle? = nil) -> UIKit.UIImage?
}
public class SCLibError {
  public var errorCode: Swift.Int!
  public var errorMessage: Swift.String!
  public init(code: Swift.Int, message: Swift.String)
  public init(message: Swift.String)
  @objc deinit
}
public enum BuilderError : Swift.Error {
  case InvalidCountry(message: Swift.String = "Invalid country name. If unsure, leave the field empty and pick a country from the list.".localized)
  case NotEnoughScannerSteps(message: Swift.String = "Must have at least one step to run the scanner.".localized)
}
extension BuilderError {
  public var localizedDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CountryPicker {
  public class func start(parentViewController: UIKit.UIViewController, onComplete: ((Swift.Bool, Swift.Int?, Swift.String?) -> Swift.Void)?)
  @objc deinit
}
extension PassportScannerViewController {
  public class Builder {
    public init(onComplete: @escaping (Swift.Bool, P1VerifyIDSchema.Passport?) -> Swift.Void)
    public func setCheckHasFace(checkHasFace: Swift.Bool) -> ShoLib.PassportScannerViewController.Builder
    public func create() -> ShoLib.PassportScannerViewController
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers public class CustomPickerViewController : UIKit.UIViewController {
  public var onComplete: ((Swift.Bool, Swift.Int?, Swift.String?) -> Swift.Void)?
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CustomPickerViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @objc override dynamic public func willMove(toParent parent: UIKit.UIViewController?)
  @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
extension CustomPickerViewController : UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate {
  @objc dynamic public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, attributedTitleForRow row: Swift.Int, forComponent component: Swift.Int) -> Foundation.NSAttributedString?
}
extension CustomPickerViewController {
  public class Builder {
    public init(parentViewController: UIKit.UIViewController)
    public func setCompletionListener(onComplete: @escaping (Swift.Bool, Swift.Int?, Swift.String?) -> Swift.Void) -> ShoLib.CustomPickerViewController.Builder
    public func setMessage(message: Swift.String) -> ShoLib.CustomPickerViewController.Builder
    public func setPickerSource(items: [Swift.String]) -> ShoLib.CustomPickerViewController.Builder
    public func setCurrentSelectionIndex(index: Swift.Int) -> ShoLib.CustomPickerViewController.Builder
    public func setCancellableOnTouchOutside(cancellable: Swift.Bool) -> ShoLib.CustomPickerViewController.Builder
    public func start()
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class ValueFormatter {
  public static let LONG_DATE_FORMAT: Swift.String
  public static let SHORT_DATE_FORMAT: Swift.String
  public static let SHORT_DATE_TIME_FORMAT: Swift.String
  public class func getFormattedDriverLicense(from driverLicense: P1VerifyIDSchema.DriverLicense) -> P1VerifyIDSchema.DriverLicense
  public class func formatCountry(country: Swift.String) -> Swift.String
  public class func formatName(name: Swift.String) -> Swift.String
  public class func formatGender(gender: Swift.String) -> Swift.String
  public class func formatStreet(addressStreet: Swift.String) -> Swift.String
  public class func formatCity(addressCity: Swift.String) -> Swift.String
  public class func formatState(addressState: Swift.String) -> Swift.String
  public class func formatZip(addressZip: Swift.String, zipLength: Swift.Int) -> Swift.String
  public class func formatDate(inputDate: Swift.String, inputDateFormat: Swift.String) -> Swift.String
  public class func formatDate(inputDate: Swift.String, inputDateFormat: Swift.String, outputDateFormat: Swift.String) -> Swift.String
  public class func formatHairColor(hairColor: Swift.String) -> Swift.String
  public class func formatEyeColor(eyeColor: Swift.String) -> Swift.String
  public class func formatCurrency(currency: Swift.String, showFractions: Swift.Bool = false, locale: Foundation.Locale? = nil) -> Swift.String
  @objc deinit
}
public protocol SCLiveFaceVerifierListener {
  func onVerificationResult(step: ShoLib.SCLiveFaceVerificationStep, faceId: Swift.Int, percentageOfValidFrames: Swift.Float)
  func onVerificationProgress(step: ShoLib.SCLiveFaceVerificationStep, face: ShoLib.SCFace, result: Swift.Bool)
  func onVerificationError(error: ShoLib.SCLiveFaceVerifierError)
}
@objc @_inheritsConvenienceInitializers public class LiveFaceVerificationViewController : UIKit.UIViewController {
  @objc @IBOutlet weak public var bgImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var navBar: UIKit.UIView!
  @objc @IBOutlet weak public var navBarLogoImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var cameraView: ShoLib.CameraView!
  @objc @IBOutlet weak public var guidelineImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var errorTextView: UIKit.UILabel!
  @objc @IBOutlet weak public var stepIndicatorImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var stepLabelTextView: UIKit.UILabel!
  @objc @IBOutlet weak public var instructionTextView: UIKit.UILabel!
  @objc @IBOutlet weak public var progressTimer: ShoLib.SCCircularProgressView!
  @objc @IBOutlet weak public var captureButton: UIKit.UIButton!
  @objc @IBOutlet weak public var confirmButton: UIKit.UIButton!
  @objc @IBOutlet weak public var retakeButton: UIKit.UIButton!
  @objc @IBOutlet weak public var cancelButton: UIKit.UIButton!
  @objc @IBOutlet weak public var skipButton: UIKit.UIButton!
  @objc @IBOutlet weak public var previewImageView: UIKit.UIImageView!
  public func show(parentViewController: UIKit.UIViewController, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension LiveFaceVerificationViewController : ShoLib.SCLiveFaceVerifierListener {
  public func onVerificationResult(step: ShoLib.SCLiveFaceVerificationStep, faceId: Swift.Int, percentageOfValidFrames: Swift.Float)
  public func onVerificationProgress(step: ShoLib.SCLiveFaceVerificationStep, face: ShoLib.SCFace, result: Swift.Bool)
  public func isFullFaceWithinCameraBounds(_ face: ShoLib.SCFace) -> Swift.Bool
  public func isFaceWithinGuidelines(_ face: ShoLib.SCFace) -> Swift.Bool
  public func onVerificationError(error: ShoLib.SCLiveFaceVerifierError)
  public func onError(error: ShoLib.SCLiveFaceVerifierError)
}
extension LiveFaceVerificationViewController : ShoLib.SCImageProcessingDelegate {
  public func capturedImage(_ image: UIKit.UIImage, rect: CoreGraphics.CGRect)
  public func capturedMetadata(_ metadata: Swift.String)
  public func onFrameReceived(_ sampleBuffer: CoreMedia.CMSampleBuffer?)
}
extension LiveFaceVerificationViewController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc public class CameraOverlayView : UIKit.UIView {
  public var previewRectFrame: CoreGraphics.CGRect?
  public var overlayBackgroundColor: UIKit.UIColor
  public var drawOutline: Swift.Bool
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc @_inheritsConvenienceInitializers public class PassportScannerViewController : UIKit.UIViewController {
  @objc @IBOutlet weak public var bgImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var navBar: UIKit.UIView!
  @objc @IBOutlet weak public var navBarLogoImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var cameraView: ShoLib.CameraView!
  @objc @IBOutlet weak public var overlayReferenceView: UIKit.UIView!
  @objc @IBOutlet weak public var overlayView: ShoLib.CameraOverlayView!
  @objc @IBOutlet weak public var stepIndicatorImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var stepLabelTextView: UIKit.UILabel!
  @objc @IBOutlet weak public var instructionTextView: UIKit.UILabel!
  @objc @IBOutlet weak public var torchButton: UIKit.UIButton!
  @objc @IBOutlet weak public var captureButton: UIKit.UIButton!
  @objc @IBOutlet weak public var confirmButton: UIKit.UIButton!
  @objc @IBOutlet weak public var retakeButton: UIKit.UIButton!
  @objc @IBOutlet weak public var cancelButton: UIKit.UIButton!
  @objc @IBOutlet weak public var cropView: ShoLib.SCResizableView!
  @objc @IBOutlet weak public var previewImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var idStepInstructionView: UIKit.UIView!
  @objc @IBOutlet weak public var idStepInstructionLabel: UIKit.UILabel!
  public func show(parentViewController: UIKit.UIViewController, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PassportScannerViewController : ShoLib.SCImageProcessingDelegate {
  public func capturedImage(_ image: UIKit.UIImage, rect: CoreGraphics.CGRect)
  public func capturedMetadata(_ metadata: Swift.String)
}
extension PassportScannerViewController : UIKit.UIScrollViewDelegate {
}
extension SCLiveFaceVerifier {
  public class Builder {
    public init(listener: ShoLib.SCLiveFaceVerifierListener)
    public func setFaceDetector(faceDetector: ShoLib.SCFaceDetector) -> ShoLib.SCLiveFaceVerifier.Builder
    public func setCurrentVerificationStep(currentVerificationStep: ShoLib.SCLiveFaceVerificationStep) -> ShoLib.SCLiveFaceVerifier.Builder
    public func setAccuracy(accuracy: ShoLib.SCLiveFaceVerificationAccuracy) -> ShoLib.SCLiveFaceVerifier.Builder
    public func setVerificationTime(verificationTime: Foundation.TimeInterval) -> ShoLib.SCLiveFaceVerifier.Builder
    public func create() throws -> ShoLib.SCLiveFaceVerifier
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SCCircularProgressView : UIKit.UIView {
  public var progressColor: UIKit.UIColor
  public var trackColor: UIKit.UIColor
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public func reset()
  public func setProgress(_ progress: CoreGraphics.CGFloat)
  public func startTimerForDuration(_ duration: Foundation.TimeInterval = 1.0)
  @objc deinit
}
public class SCFace {
  final public let faceId: Swift.Int
  final public let boundingBox: CoreGraphics.CGRect
  final public let hasSmile: Swift.Bool
  final public let isLeftEyeClosed: Swift.Bool
  final public let isRightEyeClosed: Swift.Bool
  final public let headTiltAngle: Swift.Float
  public var originalImageSize: CoreGraphics.CGRect?
  public var underlyingObject: Any?
  public init(faceId: Swift.Int, boundingBox: CoreGraphics.CGRect, hasSmile: Swift.Bool, isLeftEyeClosed: Swift.Bool, isRightEyeClosed: Swift.Bool, headTiltAngle: Swift.Float)
  @objc deinit
}
public struct UIImageColors {
  public var backgroundColor: UIKit.UIColor!
  public var primaryColor: UIKit.UIColor!
  public var secondaryColor: UIKit.UIColor!
  public var detailColor: UIKit.UIColor!
}
extension UIImage {
  public func getColors(scaleDownSize: CoreGraphics.CGSize = CGSize.zero, completionHandler: @escaping (ShoLib.UIImageColors) -> Swift.Void)
  public func getColors(scaleDownSize: CoreGraphics.CGSize = CGSize.zero) -> ShoLib.UIImageColors
}
@_hasMissingDesignatedInitializers public class DateUtils {
  public class func isDateValid(value: Swift.String, dateFormat: Swift.String) -> Swift.Bool
  public class func dateFromString(value: Swift.String, dateFormat: Swift.String) -> Foundation.Date?
  public class func dateFromString(value: Swift.String, dateFormat: Swift.String) -> Foundation.Date
  public class func stringFromDate(date: Foundation.Date, dateFormat: Swift.String) -> Swift.String
  @objc deinit
}
extension Date {
  public var age: Swift.Int {
    get
  }
}
public struct ImageTransformations {
  public static func cropImage(_ originalImage: UIKit.UIImage, cropRect: CoreGraphics.CGRect) -> UIKit.UIImage
  public static func binarise(_ image: UIKit.UIImage) -> UIKit.UIImage?
  public static func convertToGrayScale(_ image: UIKit.UIImage) -> UIKit.UIImage?
  public static func imageWithContrast(_ image: UIKit.UIImage, contrastFactor: Swift.Float, brightnessFactor: Swift.Float) -> UIKit.UIImage?
  public static func detectBoxInImage(_ image: UIKit.UIImage) -> CoreGraphics.CGRect?
  public static func adjustBoundsForImageProcessing(_ image: UIKit.UIImage, bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public static func cutCardBordersIn(_ image: UIKit.UIImage) -> UIKit.UIImage
  public static func getCardWithBordersRect(_ image: UIKit.UIImage) -> CoreGraphics.CGRect
  public static func croppedImage(_ image: UIKit.UIImage, bounds: CoreGraphics.CGRect) -> UIKit.UIImage
  public static func thumbnailImage(_ image: UIKit.UIImage, thumbnailSize: Swift.Int, transparentBorder: Swift.Int, cornerRadius: Swift.Int, interpolationQuality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public static func hasAlpha(_ image: UIKit.UIImage) -> Swift.Bool
  public static func imageWithAlpha(_ image: UIKit.UIImage) -> UIKit.UIImage
  public static func transparentBorderImage(_ image: UIKit.UIImage, borderSize: Swift.Int) -> UIKit.UIImage
  public static func newBorderMask(_ borderSize: CoreGraphics.CGFloat, size: CoreGraphics.CGSize) -> CoreGraphics.CGImage
  public static func resizedImage(_ image: UIKit.UIImage, newSize: CoreGraphics.CGSize, interpolationQuality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public static func resizedImageWithContentMode(_ image: UIKit.UIImage, contentMode: UIKit.UIView.ContentMode, bounds: CoreGraphics.CGSize, interpolationQuality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public static func resizedImageToSize(_ image: UIKit.UIImage, dstSize: CoreGraphics.CGSize) -> UIKit.UIImage
  public static func resizedImageToFitInSize(_ image: UIKit.UIImage, boundingSize: CoreGraphics.CGSize, scale: Swift.Bool) -> UIKit.UIImage
  public static func croppedImage2(_ image: UIKit.UIImage, bounds: CoreGraphics.CGRect) -> UIKit.UIImage
  public static func resizedImage(_ image: UIKit.UIImage, newSize: CoreGraphics.CGSize, transform: CoreGraphics.CGAffineTransform, drawTransposed: Swift.Bool, interpolationQuality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public static func resizedAndScaleImage(_ image: UIKit.UIImage, newSize: CoreGraphics.CGSize, scale: CoreGraphics.CGFloat, transform: CoreGraphics.CGAffineTransform, drawTransposed: Swift.Bool, interpolationQuality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public static func transformForOrientation(_ image: UIKit.UIImage, newSize: CoreGraphics.CGSize) -> CoreGraphics.CGAffineTransform
  public static func imageRotatedByDegrees(_ oldImage: UIKit.UIImage, degrees: CoreGraphics.CGFloat) -> UIKit.UIImage
  public static func getImageCroppedFromViewRect(_ imageView: UIKit.UIImageView, cropRect: CoreGraphics.CGRect) -> UIKit.UIImage
  public static func getImageRectFromImageviewRect(_ imageView: UIKit.UIImageView, cropRect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public static func getImageviewRectFromImageRect(_ imageView: UIKit.UIImageView, imageRect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public static func imageWithNormalizedOrientation(inputImage: UIKit.UIImage) -> UIKit.UIImage?
  public static func getImageFromFile(name: Swift.String) -> UIKit.UIImage?
  public static func saveImageDataToFile(imageData: Foundation.Data, name: Swift.String) -> Swift.Bool
  public static func resizeImage(_ image: UIKit.UIImage, scale: CoreGraphics.CGFloat) -> UIKit.UIImage?
  public static func croppedImage(viewBounds: CoreGraphics.CGRect, image: UIKit.UIImage, rect: CoreGraphics.CGRect) -> UIKit.UIImage
  public static func getImageOrientation(image: UIKit.UIImage) -> Swift.Int
  public static func imageToBase64(image: UIKit.UIImage) -> Swift.String
  public static func imageFromBase64(imageStr: Swift.String) -> UIKit.UIImage?
}
extension CALayer {
  public var borderUIColor: UIKit.UIColor? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers public class FaceTrackingViewController : UIKit.UIViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  public var facialChecks: [ShoLib.FaceTrackingViewController.type]
  public var completion: (([Swift.String : Swift.Double], Swift.Bool, UIKit.UIImage?) -> ())!
  public var scanTime: Swift.Double
  public var delayTime: Swift.Double
  public var threshold: Swift.Double
  public var maxAttempts: Swift.Int
  public static func getViewController() -> ShoLib.FaceTrackingViewController
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension FaceTrackingViewController {
  public enum type : Swift.Int {
    case closeLeft
    case closeRight
    case openBoth
    case closeBoth
    case straightFace
    case smile
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
}
public class SCBarcode {
  public init(rawValue: Swift.String, boundingBox: CoreGraphics.CGRect? = nil)
  @objc deinit
}
public protocol IDScannerProtocol {
  var listener: ShoLib.IDScannerListener? { get set }
  func scan(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: Swift.Int)
  func scan(image: UIKit.UIImage, orientation: Swift.Int)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IDScannerTask : ShoLib.SerialTaskExecutor<[ShoLib.SCBarcode]> {
  override public func onError(error: ShoLib.SerialTaskExecutorError)
  @objc deinit
}
public typealias IDScanner = ShoLib.IDScannerTask & ShoLib.IDScannerProtocol
public class Logger {
  public init(tag: Swift.String)
  public func log(timeInterval: Foundation.TimeInterval = Date().timeIntervalSince1970, message: Swift.String, details: Swift.String = "")
  public func getLogs() -> [ShoLib.LogItem]
  public func clearFirst(numberOfLogs: Swift.Int)
  public func clearLast(numberOfLogs: Swift.Int)
  public func clearLogs()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LogItem : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  public func getTimeStamp() -> Foundation.TimeInterval
  public func getMessage() -> Swift.String
  public func getDetails() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class AuthenticationHelper {
  public class func askUserApproval(_ reason: Swift.String, successHandler: @escaping () -> Swift.Void, failureHandler: @escaping () -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Toolbox {
  public class func getImageFrom(url: Foundation.URL) -> UIKit.UIImage?
  public class func getExifOrientationFor(imageOrientation: UIKit.UIImage.Orientation) -> ImageIO.CGImagePropertyOrientation
  public class func exifOrientationFromDeviceOrientation() -> ImageIO.CGImagePropertyOrientation
  public class func exifOrientation(orientation: UIKit.UIDeviceOrientation) -> Swift.Int
  public class func vibrate()
  public class func getCurrentTimestampFormatted() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SampleBufferUtils {
  public class func getCroppedSmapleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer, for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer?) -> CoreMedia.CMSampleBuffer?
  open class func getSampleBufferFromUIImage(image: UIKit.UIImage) -> CoreMedia.CMSampleBuffer?
  open class func getUIImageFromSampleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer, for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer? = nil) -> UIKit.UIImage?
  open class func getImageFromSampleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer) -> UIKit.UIImage?
  @objc deinit
}
extension LiveFaceVerificationViewController.Builder {
  public enum BuilderError : Swift.Error {
    case MissingVerificationStep(message: Swift.String = "Verifier must have at least one verification step.".localized)
    case NotEnoughVerificationSteps(message: Swift.String = "Must have at least two Verification Steps for the test.".localized)
    case InvalidVerificationTime(message: Swift.String = "Verification Time cannot be negative.".localized)
  }
}
extension LiveFaceVerificationViewController.Builder.BuilderError {
  public var localizedDescription: Swift.String {
    get
  }
}
public func logLine(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func log(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func logerror(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func logattention(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
@_hasMissingDesignatedInitializers public class CoreImageFaceDetector : ShoLib.SCFaceDetector {
  public var listener: ShoLib.SCFaceDetectorListener?
  public var accuracy: ShoLib.SCLiveFaceVerificationAccuracy
  required public init(listener: ShoLib.SCFaceDetectorListener, tracking: Swift.Bool = false) throws
  override public func clear()
  public func detectFaces(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: Swift.Int = Toolbox.exifOrientation(orientation: UIDevice.current.orientation))
  public func detectFaces(image: UIKit.UIImage, orientation: Swift.Int = Toolbox.exifOrientation(orientation: UIDevice.current.orientation))
  public func detectFaces(url: Foundation.URL)
  @objc deinit
}
extension DriverLicenseScannerViewController {
  public class Builder {
    public init(onComplete: @escaping (Swift.Bool, P1VerifyIDSchema.DriverLicense?) -> Swift.Void)
    public func setCountry(country: Swift.String) throws -> ShoLib.DriverLicenseScannerViewController.Builder
    public func setSteps(scannerSteps: ShoLib.IDScannerStep...) throws -> ShoLib.DriverLicenseScannerViewController.Builder
    public func setIdScanner(idScanner: ShoLib.IDScanner) -> ShoLib.DriverLicenseScannerViewController.Builder
    public func setCheckHasFace(checkHasFace: Swift.Bool) -> ShoLib.DriverLicenseScannerViewController.Builder
    public func setFaceDetector(faceDetector: ShoLib.SCFaceDetector) -> ShoLib.DriverLicenseScannerViewController.Builder
    public func create() -> ShoLib.DriverLicenseScannerViewController
    @objc deinit
  }
}
extension LiveFaceVerificationViewController {
  public class Builder {
    public init(onComplete: @escaping (Swift.Bool, P1VerifyIDSchema.Selfie?) -> Swift.Void)
    public func setVerificationTime(verificationTime: Foundation.TimeInterval) -> ShoLib.LiveFaceVerificationViewController.Builder
    public func setVerificationSteps(verificationSteps: ShoLib.SCLiveFaceVerificationStep...) -> ShoLib.LiveFaceVerificationViewController.Builder
    public func setAccuracy(accuracy: ShoLib.SCLiveFaceVerificationAccuracy) -> ShoLib.LiveFaceVerificationViewController.Builder
    public func setFaceDetector(faceDetector: ShoLib.SCFaceDetector) -> ShoLib.LiveFaceVerificationViewController.Builder
    public func create() throws -> ShoLib.LiveFaceVerificationViewController
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class FaceDetector {
  public class func isSelfieValid(image: UIKit.UIImage) -> Swift.Bool
  public class func numberOfFacesInImage(image: UIKit.UIImage) -> Swift.Int
  @objc deinit
}
public protocol SCFaceDetectorListener {
  func onFacesDetected(faces: [ShoLib.SCFace])
  func onFaceDetectorError(error: ShoLib.SCFaceDetectorError)
}
@_hasMissingDesignatedInitializers public class SerialTaskExecutorError : Swift.Error {
  public var localizedDescription: Swift.String {
    get
  }
  public var cause: Swift.Error?
  @objc deinit
}
public protocol SCImageProcessingDelegate {
  func capturedImage(_ image: UIKit.UIImage, rect: CoreGraphics.CGRect)
  func capturedMetadata(_ metadata: Swift.String)
}
public enum CameraDevicePosition {
  case frontcamera, backcamera
  public static func == (a: ShoLib.CameraDevicePosition, b: ShoLib.CameraDevicePosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum CroppedOptions {
  case none, croppedToViewPort, croppedToEdges
  public static func == (a: ShoLib.CroppedOptions, b: ShoLib.CroppedOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class CameraView : UIKit.UIView {
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc open class SCAVCaptureWrapper : ObjectiveC.NSObject, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  open var previewLayer: AVFoundation.AVCaptureVideoPreviewLayer!
  public var qrburst: Swift.Bool
  public var flipImage: Swift.Bool
  public init(captureView: ShoLib.CameraView, delegate: ShoLib.SCImageProcessingDelegate? = nil, videoOrientation: UIKit.UIInterfaceOrientation)
  @objc deinit
  @objc public func captureViewTapped(sender: UIKit.UITapGestureRecognizer? = nil)
  open func addStillCameraOutput(_ cameraDevicePosition: ShoLib.CameraDevicePosition)
  open func addStillCameraOutput(_ preferredCamera: AVFoundation.AVCaptureDevice.Position)
  public func hasObjectRect() -> Swift.Bool
  public func drawObjectRect(rect: CoreGraphics.CGRect, borderColor: CoreGraphics.CGColor = UIColor.green.cgColor, cornerRadius: CoreGraphics.CGFloat = 0, borderWidth: CoreGraphics.CGFloat = 3)
  public func updateObjectRectBounds(rect: CoreGraphics.CGRect)
  public func updateObjectRectColor(color: CoreGraphics.CGColor)
  public func clearObjectRects()
  public enum FaceDetectionEvent {
    case noFaceInFrame
    case faceFoundInFrame(face: ShoLib.SCFace)
    case multipleFacesInFrame(faces: [ShoLib.SCFace])
  }
  public func addFaceDetection(_ preferredCamera: ShoLib.CameraDevicePosition, onFaceDetectionEvent: ((ShoLib.SCAVCaptureWrapper.FaceDetectionEvent) -> Swift.Void)?, drawRect: Swift.Bool = false)
  @objc public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  open func takeStillImage(_ cropped: ShoLib.CroppedOptions = .none)
  open func disableMetadataCapture(_ types: [AVFoundation.AVMetadataObject.ObjectType] = [])
  open func addMetadataCapture(_ types: [AVFoundation.AVMetadataObject.ObjectType] = [])
  open func addVideoFrameCapture(_ preferredCamera: ShoLib.CameraDevicePosition, onFrameReceived: ((CoreMedia.CMSampleBuffer?) -> Swift.Void)? = nil)
  open func addVideoFrameCapture(_ preferredCamera: AVFoundation.AVCaptureDevice.Position, onFrameReceived: ((CoreMedia.CMSampleBuffer?) -> Swift.Void)? = nil)
  open func addQRCodeCapture()
  open func switchToMetadataCapture(_ types: [AVFoundation.AVMetadataObject.ObjectType] = [])
  open func setFlashMode(_ flashMode: AVFoundation.AVCaptureDevice.FlashMode, device: AVFoundation.AVCaptureDevice)
  open func setTorchMode(_ torchMode: AVFoundation.AVCaptureDevice.TorchMode, device: AVFoundation.AVCaptureDevice)
  public func setTorchOn()
  public func setTorchOff()
  public func setFlashOn()
  public func setFlashOff()
  public func setFlashAuto()
  public func setFocus(device: AVFoundation.AVCaptureDevice)
  public func toggleFlash() -> AVFoundation.AVCaptureDevice.FlashMode
  open func hideQRBox()
  open func changeOrientation(_ orientation: UIKit.UIInterfaceOrientation)
  @objc open func orientationChanged()
  open func stop()
  open func start()
  public static func isCameraPermissionGranted() -> Swift.Bool
  public static func requestCameraPermission(onComplete: @escaping (Swift.Bool) -> Swift.Void)
  public static func showCameraPermissionRationale(parentViewController: UIKit.UIViewController, message: Swift.String, onCanceled: (() -> Swift.Void)? = nil)
  public func getContext() -> CoreImage.CIContext
  @objc override dynamic public init()
}
extension SCAVCaptureWrapper : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  public func getLastVideoFrameBuffer(cropped: Swift.Bool = true) -> CoreMedia.CMSampleBuffer?
  public func getLastVideoFrame(cropped: Swift.Bool = true) -> UIKit.UIImage?
}
@_hasMissingDesignatedInitializers public class USStates {
  public static let stateCodes: [Swift.String : Swift.String]
  public class func getStateForStateCode(_ stateCode: Swift.String) -> Swift.String?
  @objc deinit
}
public enum SCLiveFaceVerificationStep : Swift.String {
  case lfv_smile
  case lfv_straight_face
  case lfv_close_left_eye
  case lfv_close_right_eye
  case lfv_tracker_mode
  public func getThreshold(_ accuracy: ShoLib.SCLiveFaceVerificationAccuracy) -> Swift.Float
  public func getStepLabel() -> Swift.String
  public func getStepIndicator() -> UIKit.UIImage?
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum SCLiveFaceVerificationAccuracy {
  case low
  case medium
  case high
  public func getMinValidFrames() -> Swift.Float
  public static func == (a: ShoLib.SCLiveFaceVerificationAccuracy, b: ShoLib.SCLiveFaceVerificationAccuracy) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol SCFaceDetectorProtocol {
  var listener: ShoLib.SCFaceDetectorListener? { get set }
  var accuracy: ShoLib.SCLiveFaceVerificationAccuracy { get set }
  func detectFaces(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: Swift.Int)
  func detectFaces(image: UIKit.UIImage, orientation: Swift.Int)
  func detectFaces(url: Foundation.URL)
}
@_hasMissingDesignatedInitializers public class SCFaceDetectorTask {
  public func clear()
  public func execute(task: @escaping ((Any?) throws -> [ShoLib.SCFace]), arg: Any?)
  public func onComplete(result: [ShoLib.SCFace]?)
  public func onError(error: ShoLib.SCFaceDetectorError)
  @objc deinit
}
public typealias SCFaceDetector = ShoLib.SCFaceDetectorTask & ShoLib.SCFaceDetectorProtocol
public enum IDScannerError : Swift.Error {
  case Unknown(message: Swift.String? = nil, cause: Swift.Error? = nil)
}
extension IDScannerError {
  public var localizedDescription: Swift.String {
    get
  }
}
public enum IDScannerStep : Swift.String {
  case capture_front
  case scan_id
  case capture_back
  public func getStepLabel(confirmation: Swift.Bool) -> Swift.String
  public func getStepDescription(confirmation: Swift.Bool) -> Swift.String
  public func getStepIndicator() -> UIKit.UIImage?
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIColor {
  public func toHexString() -> Swift.String
  public var redComponent: CoreGraphics.CGFloat {
    get
  }
  public var greenComponent: CoreGraphics.CGFloat {
    get
  }
  public var blueComponent: CoreGraphics.CGFloat {
    get
  }
  public var alphaComponent: CoreGraphics.CGFloat {
    get
  }
}
@_hasMissingDesignatedInitializers public class SerialTaskExecutor<T> {
  public func onComplete(result: T?)
  public func onError(error: ShoLib.SerialTaskExecutorError)
  public func clear()
  public func isQueueEmpty() -> Swift.Bool
  public func execute(task: @escaping ((Any?) throws -> T?), arg: Any?)
  @objc deinit
}
extension UIButton {
  public func preventRepeatedClicks(inNext seconds: Foundation.TimeInterval = 1)
}
extension String {
  public var localized: Swift.String {
    get
  }
  public func localized(in fileName: Swift.String) -> Swift.String
  public func localized(tableName: Swift.String, bundle: Foundation.Bundle?, defaultValue: Swift.String) -> Swift.String
  public func localized(in fileName: Swift.String, with args: Swift.CVarArg...) -> Swift.String
  public func localized(_ args: Swift.CVarArg...) -> Swift.String
}
extension UIAlertController {
  public func show()
  public class func showAlertWithTextField(title: Swift.String?, message: Swift.String, saveButtonLabel: Swift.String, cancelButtonLabel: Swift.String, textFieldPlaceholder: Swift.String = "", keyboardType: UIKit.UIKeyboardType = .default, returnKeyType: UIKit.UIReturnKeyType = .done, textFieldDelegate: ShoLib.TextFieldDelegate? = nil, completion: @escaping ((Swift.String) -> Swift.Void))
  public class func showAlertWithTwoButtons(title: Swift.String?, message: Swift.String, button1Label: Swift.String, button2Label: Swift.String, button1Handler: ((UIKit.UIAlertAction) -> Swift.Void)?, button2Handler: ((UIKit.UIAlertAction) -> Swift.Void)?)
  public class func showAlertWithOneButton(title: Swift.String?, message: Swift.String, buttonLabel: Swift.String, buttonHandler: ((UIKit.UIAlertAction) -> Swift.Void)?)
  public class func showAlertWithoutButtons(title: Swift.String = "Error", message: Swift.String)
}
extension UIWindow {
  public func visibleViewController() -> UIKit.UIViewController?
  public class func getVisibleViewControllerFrom(_ vc: UIKit.UIViewController) -> UIKit.UIViewController
}
@objc @_hasMissingDesignatedInitializers public class TextFieldDelegate : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class Country {
  public static let COUNTRY_CODES: [Swift.String : Swift.String]
  public static let COUNTRY_NAMES: [Swift.String : Swift.String]
  public class func getCountryNameForCode(isoCode: Swift.String) -> Swift.String?
  public class func getCountryCodeForName(name: Swift.String) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DriverLicenseScannerViewController : UIKit.UIViewController {
  @objc @IBOutlet weak public var bgImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var navBar: UIKit.UIView!
  @objc @IBOutlet weak public var navBarLogoImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var cameraView: ShoLib.CameraView!
  @objc @IBOutlet weak public var overlayReferenceView: UIKit.UIView!
  @objc @IBOutlet weak public var overlayView: ShoLib.CameraOverlayView!
  @objc @IBOutlet weak public var stepIndicatorImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var stepLabelTextView: UIKit.UILabel!
  @objc @IBOutlet weak public var instructionTextView: UIKit.UILabel!
  @objc @IBOutlet weak public var torchButton: UIKit.UIButton!
  @objc @IBOutlet weak public var captureButton: UIKit.UIButton!
  @objc @IBOutlet weak public var confirmButton: UIKit.UIButton!
  @objc @IBOutlet weak public var retakeButton: UIKit.UIButton!
  @objc @IBOutlet weak public var cancelButton: UIKit.UIButton!
  @objc @IBOutlet weak public var skipButton: UIKit.UIButton!
  @objc @IBOutlet weak public var cropView: ShoLib.SCResizableView!
  @objc @IBOutlet weak public var previewImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var idStepInstructionView: UIKit.UIView!
  @objc @IBOutlet weak public var idStepInstructionLabel: UIKit.UILabel!
  public func show(parentViewController: UIKit.UIViewController, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension DriverLicenseScannerViewController : ShoLib.SCImageProcessingDelegate {
  public func capturedImage(_ image: UIKit.UIImage, rect: CoreGraphics.CGRect)
  public func capturedMetadata(_ metadata: Swift.String)
  public func onFrameReceived(_ sampleBuffer: CoreMedia.CMSampleBuffer?)
}
extension DriverLicenseScannerViewController : ShoLib.IDScannerListener {
  public func onBarcodeScanned(barcode: ShoLib.SCBarcode)
  public func onScannerError(error: ShoLib.IDScannerError)
}
extension DriverLicenseScannerViewController : ShoLib.SCFaceDetectorListener {
  public func onFacesDetected(faces: [ShoLib.SCFace])
  public func onFaceDetectorError(error: ShoLib.SCFaceDetectorError)
}
extension DriverLicenseScannerViewController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension UIImageView {
  public func changeImageWithSlidingAnimation(direction: ShoLib.AnimationDirection, image: UIKit.UIImage?, duration: Foundation.TimeInterval)
  public func changeImageWithFlipAnimation(direction: ShoLib.AnimationDirection, image: UIKit.UIImage?, duration: Foundation.TimeInterval)
}
extension UILabel {
  public func changeTextWithSlidingAnimation(direction: ShoLib.AnimationDirection, text: Swift.String?, duration: Foundation.TimeInterval)
}
@objc @_hasMissingDesignatedInitializers public class AnimationListener : ObjectiveC.NSObject, QuartzCore.CAAnimationDelegate {
  @objc public func animationDidStart(_ anim: QuartzCore.CAAnimation)
  @objc public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
extension UIView {
  public func hideWithSlidingAnimation(direction: ShoLib.AnimationDirection, duration: Foundation.TimeInterval, listener: ShoLib.AnimationListener? = nil)
  public func showWithSlidingAnimation(direction: ShoLib.AnimationDirection, duration: Foundation.TimeInterval, listener: ShoLib.AnimationListener? = nil)
  public func slide(direction: ShoLib.AnimationDirection, slide: ShoLib.AnimationSlide, duration: Foundation.TimeInterval, listener: ShoLib.AnimationListener? = nil)
}
public enum AnimationDirection {
  case fromLeft
  case fromRight
  case fromTop
  case fromBottom
  public static func == (a: ShoLib.AnimationDirection, b: ShoLib.AnimationDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension AnimationDirection {
  public var transitionSubType: QuartzCore.CATransitionSubtype {
    get
  }
  public var oppositeDirection: ShoLib.AnimationDirection {
    get
  }
  public var flipAnimationOption: UIKit.UIView.AnimationOptions {
    get
  }
}
public enum AnimationSlide {
  case slideIn
  case slideOut
  public static func == (a: ShoLib.AnimationSlide, b: ShoLib.AnimationSlide) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension AnimationSlide {
  public var transitionType: QuartzCore.CATransitionType {
    get
  }
  public var oppositeDirection: ShoLib.AnimationSlide {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SCResizableView : UIKit.UIView {
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
public class SCExpressionVerifier {
  public static let DEFAULT_VERIFICATION_TIME_IN_SECONDS: Swift.Double
  public static let MIN_VERIFICATION_SAMPLES: Swift.Int
  public init(listener: ShoLib.SCLiveFaceVerifierListener)
  @discardableResult
  public func setExpression(_ expression: ShoLib.SCLiveFaceVerificationStep) -> ShoLib.SCExpressionVerifier
  public func verify(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: Swift.Int = Toolbox.exifOrientation(orientation: UIDevice.current.orientation))
  public func verify(image: UIKit.UIImage, orientation: Swift.Int = Toolbox.exifOrientation(orientation: UIDevice.current.orientation))
  public func verify(url: Foundation.URL)
  public func checkResultValidity(faces: [ShoLib.SCFace]) throws -> ShoLib.SCFace
  public func getProgress() -> Foundation.TimeInterval
  public func start()
  public func stop()
  @objc deinit
}
extension SCExpressionVerifier : ShoLib.SCFaceDetectorListener {
  public func onFacesDetected(faces: [ShoLib.SCFace])
  public func onFaceDetectorError(error: ShoLib.SCFaceDetectorError)
}
@_hasMissingDesignatedInitializers public class PDF417Parser {
  public class func extractInfoFromPDF417(driverLicenseBarcode: Swift.String) -> [Swift.String : Swift.String]?
  public class func extractInfoForCanadaDL(dlBarcodeData: [Swift.String]) -> [Swift.String : Swift.String]?
  public class func extractInfoForUSDL(dlBarcodeData: Swift.String) -> [Swift.String : Swift.String]?
  public class func parseFromStringWith(regex: Swift.String, string: Swift.String) -> [Swift.String]?
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardUtils {
  open class func isEmailValid(testStr: Swift.String) -> Swift.Bool
  open class func isCountryValid(country: Swift.String) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SCLiveFaceVerifier : ShoLib.SCFaceDetectorListener {
  public static let DEFAULT_VERIFICATION_TIME_IN_SECONDS: Swift.Double
  public static let DEFAULT_TIME_GAP_IN_SECONDS: Swift.Double
  public static let MIN_VERIFICATION_SAMPLES: Swift.Int
  public func restart(verificationStep: ShoLib.SCLiveFaceVerificationStep)
  public func nextStep(faceId: Swift.Int, verificationStep: ShoLib.SCLiveFaceVerificationStep)
  public func reset()
  public func getProgress() -> Foundation.TimeInterval
  public func isRunning() -> Swift.Bool
  public func verify(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: Swift.Int = Toolbox.exifOrientation(orientation: UIDevice.current.orientation))
  public func verify(image: UIKit.UIImage, orientation: Swift.Int = Toolbox.exifOrientation(orientation: UIDevice.current.orientation))
  public func verify(url: Foundation.URL)
  public func onFaceDetectorError(error: ShoLib.SCFaceDetectorError)
  public func onFacesDetected(faces: [ShoLib.SCFace])
  public func checkResultValidity(faces: [ShoLib.SCFace]) throws -> ShoLib.SCFace
  public func onError(error: ShoLib.SCLiveFaceVerifierError)
  @objc deinit
}
extension UIImageView {
  public func loadGif(name: Swift.String)
  public func loadGif(url: Swift.String)
}
extension UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
}
@_hasMissingDesignatedInitializers public class USDLUtils {
  public static let usdlCardKeys: [Swift.String]
  public static let firstNameKey: Swift.String
  public static let middleNameKey: Swift.String
  public static let lastNameKey: Swift.String
  public static let genderKey: Swift.String
  public static let streetKey: Swift.String
  public static let cityKey: Swift.String
  public static let stateKey: Swift.String
  public static let zipKey: Swift.String
  public static let countryKey: Swift.String
  public static let idNumberKey: Swift.String
  public static let issueDateKey: Swift.String
  public static let expDateKey: Swift.String
  public static let issuingCountryKey: Swift.String
  public static let birthDateKey: Swift.String
  public static let heightKey: Swift.String
  public static let weightKey: Swift.String
  public static let hairColorKey: Swift.String
  public static let eyeColorKey: Swift.String
  public static let cardImageKey: Swift.String
  public static let createTimeKey: Swift.String
  public static let updateTimeKey: Swift.String
  public static let LongFormDateFmt: Swift.String
  public class func parsePDF417(_ detectedString: Swift.String) -> [Swift.String : Swift.String]
  public class func hairColor(_ key: Swift.String) -> Swift.String
  public class func eyeColor(_ key: Swift.String) -> Swift.String
  public class func dateToString(dateStr: Swift.String, format: Swift.String = "MMddyyyy") -> Foundation.Date?
  public class func stringFromDate(_ value: Foundation.Date?) -> Swift.String
  public class func convertZip(_ value: Swift.String) -> Swift.String
  @objc deinit
}
public enum SCLiveFaceVerifierError : Swift.Error {
  case DifferentFaceFound(message: Swift.String = "different_face_error".localized(in: "LiveFaceVerification"))
  case FaceMovedOutOfFrame(message: Swift.String = "face_moved_out_of_frame_error".localized(in: "LiveFaceVerification"))
  case MultipleFacesFound(message: Swift.String = "multiple_faces_error".localized(in: "LiveFaceVerification"))
  case NoFaceFound(message: Swift.String = "no_face_error".localized(in: "LiveFaceVerification"))
  case NotEnoughSamples(message: Swift.String = "missed_expression_error".localized(in: "LiveFaceVerification"))
  case Unknown(message: Swift.String = "missed_expression_error".localized(in: "LiveFaceVerification"), cause: Swift.Error? = nil)
  case IllegalArgument(message: Swift.String)
}
extension SCLiveFaceVerifierError {
  public var localizedDescription: Swift.String {
    get
  }
  public var cause: Swift.Error? {
    get
  }
}
extension UIColor {
  public static func named(_ name: Swift.String) -> UIKit.UIColor
  public static func named(_ name: Swift.String, in bundle: Foundation.Bundle? = nil) -> UIKit.UIColor?
  public static func defaultColor(named name: Swift.String, in bundle: Foundation.Bundle? = nil, default defaultColor: UIKit.UIColor = .black) -> UIKit.UIColor
}
public protocol IDScannerListener {
  func onBarcodeScanned(barcode: ShoLib.SCBarcode)
  func onScannerError(error: ShoLib.IDScannerError)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SCDottedLineView : UIKit.UIView {
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension ShoLib.FaceTrackingViewController.type : Swift.Equatable {}
extension ShoLib.FaceTrackingViewController.type : Swift.Hashable {}
extension ShoLib.FaceTrackingViewController.type : Swift.RawRepresentable {}
extension ShoLib.CameraDevicePosition : Swift.Equatable {}
extension ShoLib.CameraDevicePosition : Swift.Hashable {}
extension ShoLib.CroppedOptions : Swift.Equatable {}
extension ShoLib.CroppedOptions : Swift.Hashable {}
extension ShoLib.SCLiveFaceVerificationStep : Swift.Equatable {}
extension ShoLib.SCLiveFaceVerificationStep : Swift.Hashable {}
extension ShoLib.SCLiveFaceVerificationStep : Swift.RawRepresentable {}
extension ShoLib.SCLiveFaceVerificationAccuracy : Swift.Equatable {}
extension ShoLib.SCLiveFaceVerificationAccuracy : Swift.Hashable {}
extension ShoLib.IDScannerStep : Swift.Equatable {}
extension ShoLib.IDScannerStep : Swift.Hashable {}
extension ShoLib.IDScannerStep : Swift.RawRepresentable {}
extension ShoLib.AnimationDirection : Swift.Equatable {}
extension ShoLib.AnimationDirection : Swift.Hashable {}
extension ShoLib.AnimationSlide : Swift.Equatable {}
extension ShoLib.AnimationSlide : Swift.Hashable {}
