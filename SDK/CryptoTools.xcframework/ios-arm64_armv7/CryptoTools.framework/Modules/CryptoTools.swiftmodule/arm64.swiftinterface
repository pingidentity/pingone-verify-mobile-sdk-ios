// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CryptoTools
import CommonCrypto
import Foundation
import LocalAuthentication
import P1VerifyIDSchema
import Swift
public struct Decrypter {
  public init(_ privateKey: CryptoTools.PrivateKey) throws
  public func decrypt(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct Encrypter {
  public init(_ publicKey: CryptoTools.PublicKey) throws
  public func encrypt(_ data: Foundation.Data) throws -> Foundation.Data
}
public protocol Key {
  var keyRef: Security.SecKey { get }
  var keyData: Foundation.Data? { get set }
  var keyType: CryptoTools.KeyType! { get }
  init(key: Security.SecKey, keyType: CryptoTools.KeyType)
  init(withTag keyTag: Swift.String, keyType: CryptoTools.KeyType, authPrompt: Swift.String?) throws
  init(withTag keyTag: Swift.String, keyType: CryptoTools.KeyType, authPrompt: Swift.String?, appPassword: Foundation.Data?, isInSecureEnclave: Swift.Bool) throws
  init(withData keyData: Foundation.Data, keyTag: Swift.String, keyType: CryptoTools.KeyType) throws
  init(withBase64EncodedString base64String: Swift.String, keyTag: Swift.String, keyType: CryptoTools.KeyType) throws
  mutating func toData() throws -> Foundation.Data
  mutating func toBase64String() throws -> Swift.String
}
extension Key {
  public init(withTag keyTag: Swift.String, keyType: CryptoTools.KeyType, authPrompt: Swift.String? = nil) throws
  public init(withTag keyTag: Swift.String, keyType: CryptoTools.KeyType, authPrompt: Swift.String?, appPassword: Foundation.Data?, isInSecureEnclave: Swift.Bool) throws
  public init(withBase64EncodedString base64String: Swift.String, keyTag: Swift.String, keyType: CryptoTools.KeyType) throws
  public init(withData keyData: Foundation.Data, keyTag: Swift.String, keyType: CryptoTools.KeyType) throws
  public mutating func toData() throws -> Foundation.Data
  public mutating func toBase64String() throws -> Swift.String
  @discardableResult
  public static func removeKeyFromKeychainIfExists(withTag keyTag: Swift.String, keyType: CryptoTools.KeyType) -> Darwin.OSStatus
  @discardableResult
  public static func removeKeyFromKeychain(withTag keyTag: Swift.String, keyType: CryptoTools.KeyType) -> Swift.Bool
}
public struct KeyClass : Swift.Equatable {
  public static let privateKey: CryptoTools.KeyClass
  public static let publicKey: CryptoTools.KeyClass
  public let keyClass: Swift.String
  public static func == (a: CryptoTools.KeyClass, b: CryptoTools.KeyClass) -> Swift.Bool
}
public struct KeyType : Swift.Equatable {
  public static let EC256Key: CryptoTools.KeyType
  public static let RSA2048Key: CryptoTools.KeyType
  public let keyType: Swift.String
  public let keySizeInBits: Swift.Int
  public var debugDescripton: Swift.String {
    get
  }
  public static func == (a: CryptoTools.KeyType, b: CryptoTools.KeyType) -> Swift.Bool
}
public struct KeyPairGenerator {
  public static func generateKeyPair(forKeyType keyType: CryptoTools.KeyType, publicKeyTag: Swift.String, privateKeyTag: Swift.String, appPassword: Foundation.Data? = nil) throws -> (CryptoTools.PrivateKey, CryptoTools.PublicKey)
  public static func generateKeyPairInSecureEnclave(forKeyType keyType: CryptoTools.KeyType, publicKeyTag: Swift.String, privateKeyTag: Swift.String, appPassword: Foundation.Data? = nil) throws -> (CryptoTools.PrivateKey, CryptoTools.PublicKey)
}
public struct PrivateKey : CryptoTools.Key {
  public var keyRef: Security.SecKey
  public var keyData: Foundation.Data?
  public var keyType: CryptoTools.KeyType!
  public init(key: Security.SecKey, keyType: CryptoTools.KeyType)
}
public struct PublicKey : CryptoTools.Key {
  public var keyRef: Security.SecKey
  public var keyData: Foundation.Data?
  public var keyType: CryptoTools.KeyType!
  public init(key: Security.SecKey, keyType: CryptoTools.KeyType)
}
extension SecKey {
  public class func initFromData(keyData: Foundation.Data, keyTag: Swift.String, keyClass: CryptoTools.KeyClass, keyType: CryptoTools.KeyType) throws -> Security.SecKey
  public func saveToKeychain(keyTag: Swift.String, keyType: CryptoTools.KeyType, keyClass: CryptoTools.KeyClass) throws
  public class func loadFromKeychain(withTag keyTag: Swift.String, keyClass: CryptoTools.KeyClass, keyType: CryptoTools.KeyType, prompt: Swift.String? = nil, appPassword: Foundation.Data? = nil, isInSecureEnclave: Swift.Bool = false) throws -> Security.SecKey
  public func toData() throws -> Foundation.Data
}
extension SecKey {
  public func isPublicKey() -> Swift.Bool
  public func isPrivateKey() -> Swift.Bool
}
extension SecKey {
  public func getKeyType() -> CryptoTools.KeyType
}
extension SecKey {
  public func isInSecureEnclave() -> Swift.Bool
}
public struct Signer {
  public init(_ privateKey: CryptoTools.PrivateKey) throws
  public func signData(_ data: Foundation.Data, digestType: CryptoTools.DigestType) throws -> Foundation.Data
  public func signDigest(_ digest: Foundation.Data, digestType: CryptoTools.DigestType) throws -> Foundation.Data
}
public struct Verifier {
  public init(_ publicKey: CryptoTools.PublicKey) throws
  public func verifyData(_ data: Foundation.Data, signature: Foundation.Data, digestType: CryptoTools.DigestType) throws -> Swift.Bool
  public func verifyDigest(_ digest: Foundation.Data, signature: Foundation.Data, digestType: CryptoTools.DigestType) throws -> Swift.Bool
}
public struct ClearData : CryptoTools.CryptoData {
  public var data: Foundation.Data
  public init(data: Foundation.Data)
  public func digest(digestType: CryptoTools.DigestType) -> CryptoTools.MessageDigest
  public func encrypt(with encrypter: CryptoTools.Encrypter) throws -> CryptoTools.EncryptedData
}
public protocol CryptoData {
  var data: Foundation.Data { get }
  init(base64EncodedString: Swift.String) throws
  init(base64EncodedData: Foundation.Data) throws
  init(string: Swift.String)
  init(data: Foundation.Data)
}
extension CryptoData {
  public init(base64EncodedString: Swift.String) throws
  public init(base64EncodedData: Foundation.Data) throws
  public init(string: Swift.String)
}
public struct EncryptedData : CryptoTools.CryptoData {
  public var data: Foundation.Data
  public init(data: Foundation.Data)
  public func decrypt(with decrypter: CryptoTools.Decrypter) throws -> CryptoTools.ClearData
}
public enum DigestType {
  case MD5, SHA1, SHA224, SHA256, SHA384, SHA512
  public static func == (a: CryptoTools.DigestType, b: CryptoTools.DigestType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct MessageDigest : CryptoTools.CryptoData {
  public var data: Foundation.Data
  public init(data: Foundation.Data)
  public func sign(with signer: CryptoTools.Signer, digestType: CryptoTools.DigestType) throws -> CryptoTools.Signature
}
public struct Signature : CryptoTools.CryptoData {
  public var data: Foundation.Data
  public init(data: Foundation.Data)
  public func verifyData(with verifier: CryptoTools.Verifier, data: Foundation.Data, digestType: CryptoTools.DigestType) throws -> Swift.Bool
  public func verifyDigest(with verifier: CryptoTools.Verifier, digest: Foundation.Data, digestType: CryptoTools.DigestType) throws -> Swift.Bool
}
public enum CryptoError : Swift.Error {
  case invalidKeySize(_: Swift.Int)
  case invalidKeyFormat(_: Swift.String)
  case invalidInput(_: Swift.String)
  case failedToImportKey(_: Swift.String)
  case failedToExportKeyData(_: Swift.String)
  case encryptionFailed(_: Swift.String)
  case decryptionFailed(_: Swift.String)
  case signingFailed(_: Swift.String)
  case verificationFailed(_: Swift.String)
  case failedToGenerateIV
  case failedToGenerateSymmetricKey
  case failedToGenerateKeyPair(_: Swift.String)
  case failedToLoadKeyFromKeychain(_: Swift.String)
  case itemNotFoundInKeychain(_: Swift.String)
  case mustExecuteOnBGThread(_: Swift.String)
  case missingKey(_: Swift.String)
  case missingBundleIdentifier(_: Swift.String)
}
extension CryptoError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension CryptoError : Swift.Equatable {
  public static func == (lhs: CryptoTools.CryptoError, rhs: CryptoTools.CryptoError) -> Swift.Bool
}
public struct AES128 : CryptoTools.SymmetricCrypter {
  public static let keySizeBytes: Swift.Int
  public static let ivSizeBytes: Swift.Int
  public static let blockSize: Swift.Int
  public static let paddingOptions: CommonCrypto.CCOptions
  public let symmKey: Foundation.Data
  public init(key: Foundation.Data) throws
}
public struct AES256 : CryptoTools.SymmetricCrypter {
  public static let keySizeBytes: Swift.Int
  public static let ivSizeBytes: Swift.Int
  public static let blockSize: Swift.Int
  public static let paddingOptions: CommonCrypto.CCOptions
  public let symmKey: Foundation.Data
  public init(key: Foundation.Data) throws
}
public protocol SymmetricCrypter {
  static var keySizeBytes: Swift.Int { get }
  static var ivSizeBytes: Swift.Int { get }
  static var blockSize: Swift.Int { get }
  static var paddingOptions: CommonCrypto.CCOptions { get }
  var symmKey: Foundation.Data { get }
  init(key: Foundation.Data) throws
  func encrypt(_ data: Foundation.Data) throws -> Foundation.Data
  func decrypt(_ data: Foundation.Data) throws -> Foundation.Data
}
extension SymmetricCrypter {
  public static func createRandomKey() throws -> Foundation.Data
  public func copyRandomIVBytesTo(buffer: inout Foundation.Data) throws
  public func encrypt(_ data: Foundation.Data) throws -> Foundation.Data
  public func decrypt(_ data: Foundation.Data) throws -> Foundation.Data
}
@_hasMissingDesignatedInitializers public class EncryptedDefaults {
  public static var standard: CryptoTools.EncryptedDefaults!
  public class func initialize(usingPassword appPassword: Foundation.Data? = nil, onComplete: @escaping ((Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void))
  @discardableResult
  public func set(_ object: Swift.AnyObject, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ array: [Any], forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ dictionary: [Swift.String : Any], forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ string: Swift.String, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ bool: Swift.Bool, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ integer: Swift.Int, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ double: Swift.Double, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ float: Swift.Float, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  public func set(_ data: Foundation.Data, forKey key: Swift.String) -> Swift.Bool
  public func object(forKey key: Swift.String) -> Swift.AnyObject?
  public func dictionary(forKey key: Swift.String) -> [Swift.String : Any]?
  public func array(forKey key: Swift.String) -> [Any]?
  public func string(forKey key: Swift.String) -> Swift.String?
  public func bool(forKey key: Swift.String) -> Swift.Bool
  public func integer(forKey key: Swift.String) -> Swift.Int
  public func double(forKey key: Swift.String) -> Swift.Double
  public func float(forKey key: Swift.String) -> Swift.Float
  public func data(forKey key: Swift.String) -> Foundation.Data?
  public func removeObject(forKey key: Swift.String)
  @objc deinit
}
public class EncryptedDefaultsConfigurator {
  public init()
  public init(withSymmKey symmKey: Foundation.Data)
  @discardableResult
  public func useSecureEnclave(_ bool: Swift.Bool) -> CryptoTools.EncryptedDefaultsConfigurator
  @discardableResult
  public func setAppPasscode(_ appPassword: Foundation.Data) -> CryptoTools.EncryptedDefaultsConfigurator
  public func initialize(onComplete: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension Data {
  public func md5() -> Foundation.Data
}
extension String {
  public func md5() -> Swift.String
}
extension Data {
  public func sha1() -> Foundation.Data
}
extension String {
  public func sha1() -> Swift.String
}
extension Data {
  public func sha224() -> Foundation.Data
}
extension String {
  public func sha224() -> Swift.String
}
extension Data {
  public func sha256() -> Foundation.Data
}
extension String {
  public func sha256() -> Swift.String
}
extension Data {
  public func sha384() -> Foundation.Data
}
extension String {
  public func sha384() -> Swift.String
}
extension Data {
  public func sha512() -> Foundation.Data
}
extension String {
  public func sha512() -> Swift.String
}
public struct BiometryState {
  @discardableResult
  public static func checkBiometryState() throws -> Swift.Bool
  @discardableResult
  public static func checkDevicePasscodeState() throws -> Swift.Bool
}
public enum EncryptedDefaultsError : Swift.Error, Foundation.LocalizedError {
  case cannotUseBiometry
  case appCanceledAuthentication
  case passcodeNotSet
  case tooManyFailedAttempts
  case noEnrolledBiometry
  case deviceNotSupported
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: CryptoTools.EncryptedDefaultsError, b: CryptoTools.EncryptedDefaultsError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Data {
  public init?(hexString: Swift.String)
  public var hexDescription: Swift.String {
    get
  }
}
extension CryptoTools.DigestType : Swift.Equatable {}
extension CryptoTools.DigestType : Swift.Hashable {}
extension CryptoTools.EncryptedDefaultsError : Swift.Equatable {}
extension CryptoTools.EncryptedDefaultsError : Swift.Hashable {}
