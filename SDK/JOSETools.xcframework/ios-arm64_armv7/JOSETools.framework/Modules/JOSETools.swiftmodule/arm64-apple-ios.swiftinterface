// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JOSETools
import CommunicationManager
import CryptoTools
import Foundation
import JOSESwift
import P1VerifyIDSchema
import Swift
public class JOSECoder : CommunicationManager.CoderProtocol {
  final public let contentType: Swift.String
  public init(with joseHelper: JOSETools.JOSEHelper)
  public func encodeRequestBody(requestBody: CommunicationManager.RequestBody) throws -> Foundation.Data
  public func decodeResponseData(responseData: Foundation.Data) throws -> Any
  @objc deinit
}
public enum JOSEError : Swift.Error {
  case algorithmNotSupported(_: Swift.String)
  case invalidKeyFormat(_: Swift.String)
  case missingKey(_: Swift.String)
  case JWSSignerError(_: Swift.Error)
  case JWSVerificationError(_: Swift.Error)
  case JWEEncrypterError(_: Swift.Error)
  case JWEDecrypterError(_: Swift.Error)
  case cannotEncodeJWK(_: Swift.Error?, description: Swift.String? = nil)
  case cannotDecodeJWK(_: Swift.Error?, description: Swift.String? = nil)
  case cannotDecodeResponse(_: Swift.Error)
  case claimNotFoundInJWT(_: Swift.String)
  case malformedClaim(_: Swift.String)
  case invalidJOSEComponent(_: Swift.String)
}
extension JOSEError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension JOSEError : Swift.Equatable {
  public static func == (lhs: JOSETools.JOSEError, rhs: JOSETools.JOSEError) -> Swift.Bool
}
public struct JOSEHelper {
  public class Builder {
    public init()
    public func addJwsHeaders(_ header: [Swift.String : Swift.String]) -> JOSETools.JOSEHelper.Builder
    public func addJweHeaders(_ header: [Swift.String : Swift.String]) -> JOSETools.JOSEHelper.Builder
    public func setJWSAlgorithm(_ jwsAlgorithm: Swift.String) -> JOSETools.JOSEHelper.Builder
    public func setJWEKeyManagementAlgorithm(_ jweKeyManagementAlgorithm: Swift.String) -> JOSETools.JOSEHelper.Builder
    public func setJWEContentEncryptionAlgorithm(_ jweContentEncryptionAlgorithm: Swift.String) -> JOSETools.JOSEHelper.Builder
    public func setSenderJwkSet(_ publicJwkSet: JOSETools.JsonWebKeySet) -> JOSETools.JOSEHelper.Builder
    public func setRecipientJwkSet(_ publicJwkSet: JOSETools.JsonWebKeySet) -> JOSETools.JOSEHelper.Builder
    public func create() throws -> JOSETools.JOSEHelper
    @objc deinit
  }
  public func encodeMessage(rawMessage: Foundation.Data) throws -> Foundation.Data
  public func decodeMessage(encodedMessage: Foundation.Data) throws -> Foundation.Data
}
public struct JWEDecrypter {
  public init(decryptionPrivateKey: Security.SecKey) throws
  public init(jweKeyManagementAlgorithm: Swift.String, jweContentEncryptionAlgorithm: Swift.String, decryptionPrivateKey: Security.SecKey) throws
  public func decryptJWE(jweString: Swift.String) throws -> Foundation.Data
  public func decryptJWE(jweData: Foundation.Data) throws -> Foundation.Data
}
public struct JWEEncrypter {
  public init(encryptionPublicKey: Security.SecKey) throws
  public init(jweKeyManagementAlgorithm: Swift.String, jweContentEncryptionAlgorithm: Swift.String, encryptionPublicKey: Security.SecKey) throws
  public func encryptJWT(_ message: Foundation.Data, headerParams: [Swift.String : Swift.String]? = nil, isNested: Swift.Bool = false) throws -> Foundation.Data
}
extension JWEHeader {
  public init(keyManagementAlgorithm: JOSESwift.KeyManagementAlgorithm, contentEncryptionAlgorithm: JOSESwift.ContentEncryptionAlgorithm, additionalHeaderParams: [Swift.String : Swift.String]) throws
}
public struct JsonWebKey {
  public let jwk: JOSESwift.JWK?
  public let key: CryptoTools.Key
  public let use: JOSETools.JWKUse
  public init(key: CryptoTools.Key, jwkUse: JOSETools.JWKUse) throws
  public init(secKey: Security.SecKey, keyClass: CryptoTools.KeyClass, keyType: CryptoTools.KeyType, jwkUse: JOSETools.JWKUse) throws
  public init(jwkData: Foundation.Data, keyType: CryptoTools.KeyType) throws
  public init(jwk: JOSESwift.JWK) throws
  public func encode() -> Foundation.Data?
  public func encode() throws -> [Swift.String : Swift.String]
  public func encode() -> Swift.String?
  public static func getPubSecKey(from jwk: JOSESwift.JWK) throws -> Security.SecKey
}
public struct JsonWebKeySet {
  public var jwks: [JOSETools.JsonWebKey]
  public init(jwks: [JOSETools.JsonWebKey])
  public init(jwksDictionary: [Swift.String : Any]) throws
  public init(jwksData: Foundation.Data) throws
  public func findKeysFor(_ jwkUse: JOSETools.JWKUse, keyClass: CryptoTools.KeyClass, keyType: CryptoTools.KeyType) -> [JOSETools.JsonWebKey]
  public func encode() throws -> Swift.String
  public func encode() throws -> Foundation.Data
  public func encodeToArray() throws -> [[Swift.String : Swift.String]]
  public var debugDescription: Swift.String {
    get
  }
}
extension SecKey {
  public class func decodeFrom(jwk: Foundation.Data) throws -> Security.SecKey
  public func encodeToJWK(for use: JOSETools.JWKUse) throws -> Foundation.Data
}
public struct JWSSigner {
  public init(signingPrivateKey: Security.SecKey) throws
  public init(jwsAlgorithm: Swift.String, signingPrivateKey: Security.SecKey) throws
  public func sign(_ message: Foundation.Data, headerParams: [Swift.String : Swift.String]? = nil) throws -> Foundation.Data
  public func signJWT(_ message: Foundation.Data, headerParams: [Swift.String : Swift.String]? = nil) throws -> Foundation.Data
}
extension JWSHeader {
  public init(algorithm: JOSESwift.SignatureAlgorithm, additionalHeaderParams: [Swift.String : Swift.String]) throws
}
public struct JWSVerifier {
  public init(verificationPublicKey: Security.SecKey) throws
  public init(jwsAlgorithm: Swift.String, verificationPublicKey: Security.SecKey) throws
  public func verifyJWS(jwsString: Swift.String) throws -> Foundation.Data
  public func verifyJWS(jwsData: Foundation.Data) throws -> Foundation.Data
}
@_inheritsConvenienceInitializers public class JWTClaims : P1VerifyIDSchema.JsonSerializable {
  override public init()
  required public init(dict: [Swift.String : Any]) throws
  public func setIssuer(_ value: Swift.String)
  public func getIssuer() throws -> Swift.String
  public func setSubject(_ value: Swift.String)
  public func getSubject() throws -> Swift.String
  public func setAudience(_ value: Swift.String...)
  public func getAudience() throws -> [Swift.String]
  public func setExpirationTime(_ value: Foundation.TimeInterval)
  public func setExpirationTimeSecondsInTheFuture(_ value: Foundation.TimeInterval)
  public func getExpirationTime() throws -> Foundation.TimeInterval
  public func setNotBefore(_ value: Foundation.TimeInterval)
  public func setNotBeforeSecondsInThePast(_ value: Foundation.TimeInterval)
  public func getNotBefore() throws -> Foundation.TimeInterval
  public func setIssuedAt(_ value: Foundation.TimeInterval)
  public func setIssuedAtToNow()
  public func getIssuedAt() throws -> Foundation.TimeInterval
  public func setJwtId(_ value: Swift.String)
  public func setGeneratedJwtId()
  public func setGeneratedJwtId(count: Swift.Int)
  public func getJwtId() throws -> Swift.String
  public func unsetClaim(withName claimName: Swift.String)
  public func setClaimValue<T>(_ value: T, forName claimName: Swift.String) where T : Swift.Hashable
  public func getClaimValue<T>(forName claimName: Swift.String) throws -> T
  public func hasClaim(withName claimName: Swift.String) -> Swift.Bool
  public func getClaims() -> [Swift.String : Any]
  override public func toDictionary() throws -> [Swift.String : Any]
  @objc deinit
}
public struct JsonWebStructure {
  public var components: [Foundation.Data]
  public init(components: [Foundation.Data])
  public init(compactSerialization: Swift.String) throws
  public func getHeader() -> [Swift.String : Swift.String]?
  public func getRawPayload() -> Foundation.Data?
  public func getSignature() -> Foundation.Data?
  public func getEncryptedKey() -> Foundation.Data?
  public func getInitializationVector() -> Foundation.Data?
  public func getAuthenticationTag() -> Foundation.Data?
}
public enum JWKUse : Swift.String {
  case JWK_SIG
  case JWK_ENC
  case JWK_SIG_ENC
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum JWKType : Swift.String {
  case RSA
  case EC
  public func getKeyType() -> CryptoTools.KeyType
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
extension JOSETools.JWKUse : Swift.Equatable {}
extension JOSETools.JWKUse : Swift.Hashable {}
extension JOSETools.JWKUse : Swift.RawRepresentable {}
extension JOSETools.JWKType : Swift.Equatable {}
extension JOSETools.JWKType : Swift.Hashable {}
extension JOSETools.JWKType : Swift.RawRepresentable {}
