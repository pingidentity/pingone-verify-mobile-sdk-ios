// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IDCameraController
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreImage
import CoreMedia
import CoreMotion
import DeveloperToolsSupport
import Foundation
@_exported import IDCameraController
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_hasMissingDesignatedInitializers public class IDImage {
  @objc deinit
}
public typealias GenericFaceDetectorClosure = (IDCameraController.IDImage, @escaping (IDCameraController.FaceDetectorResult) -> Swift.Void) -> Swift.Void
public enum FaceDetectorResult : Swift.Equatable {
  case fire
  case ok
  case tooManyFaces
  case faceNotFound
  case faceTooSmall
  case faceTooBig
  case faceCropped
  case faceOffCenter
  case faceAngled
  case movementDetected
  case photoLowQuality
  case photoBlurred
  case photoBadLighting
  case error(Swift.String)
  case ignorableError(Swift.String)
  case fatalError(Swift.String)
  case unknownError
  public var rawValue: Swift.String {
    get
  }
  public static func == (a: IDCameraController.FaceDetectorResult, b: IDCameraController.FaceDetectorResult) -> Swift.Bool
}
public struct FaceDetectorSettings {
  public init()
  public var enabled: Swift.Bool
  public var active: Swift.Bool {
    get
  }
  public var showsLandmarks: Swift.Bool
  public var errorFirstTimeDelay: Swift.Double
  public var errorDelay: Swift.Double
  public var errorHideDelay: Swift.Double
  public var errorChangeDelay: Swift.Double
  public var fireDelay: Swift.Double
  public var nativeFaceDetectorSettings: IDCameraController.FaceDetectorNativeFacePositionParameters
  public var activeFaceDetectorEngines: IDCameraController.FaceDetectorEngines {
    get
  }
  public mutating func useEngines(_ detectors: IDCameraController.FaceDetectorEngines)
  public mutating func useDefaultEngines()
  public mutating func addCustomDetectingClosure(_ closure: @escaping IDCameraController.GenericFaceDetectorClosure)
}
public struct FaceDetectorEngines : Swift.OptionSet {
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let nativeVision: IDCameraController.FaceDetectorEngines
  public static let motionDetector: IDCameraController.FaceDetectorEngines
  public static let defaultEngines: IDCameraController.FaceDetectorEngines
  public typealias ArrayLiteralElement = IDCameraController.FaceDetectorEngines
  public typealias Element = IDCameraController.FaceDetectorEngines
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IDCameraViewController : IDCameraController.IDCameraControllerBase {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override open var videoPreviewContainer: UIKit.UIView? {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var customViewContainer: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var faceDetectorSettings: IDCameraController.FaceDetectorSettings? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var faceCaptureBoundaries: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bottomBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var faceLightUpSettings: IDCameraController.FaceLightUpSettings?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @IBAction @_Concurrency.MainActor(unsafe) @objc override public func captureButtonPressed()
  @_Concurrency.MainActor(unsafe) override open func UIModeDidChange(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func setButtonState(_ mode: IDCameraController.IDCameraControllerBase.ViewMode)
  @_Concurrency.MainActor(unsafe) override open func reset()
  @_Concurrency.MainActor(unsafe) override open func setMessage(_ message: Swift.String?, isError: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func setAttributedMessage(_ message: Foundation.NSAttributedString?, isError: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) override open func setFaceResult(_ result: IDCameraController.FaceDetectorResult, momentary: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func messageForFaceResult(_ result: IDCameraController.FaceDetectorResult) -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IDCameraController.IDCameraViewController {
  @_Concurrency.MainActor(unsafe) public func setPreviewBlurred(style: UIKit.UIBlurEffect.Style?, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public var bottomBarHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setBottomBarHidden(_ hidden: Swift.Bool, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setBottomBarBackgroundBlurred(_ style: UIKit.UIBlurEffect.Style)
  @_Concurrency.MainActor(unsafe) public func setBottomBarBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setCustomViewTakesFullScreen(_ fullScreen: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setFaceFrameUnderBottomBar(_ under: Swift.Bool)
}
public struct FaceLightUpSettings {
  public init()
  public enum ValueType {
    case brightness
    case luminosity
    public static func == (a: IDCameraController.FaceLightUpSettings.ValueType, b: IDCameraController.FaceLightUpSettings.ValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var valueType: IDCameraController.FaceLightUpSettings.ValueType
  public var luminocityThreshold: Swift.Double
  public var borderMaxWidth: Swift.Double
  public var lightUpScreenCenter: Swift.Bool
}
public struct FaceDetectorNativeFacePositionParameters {
  public init()
  public var checkFaceSize: Swift.Bool
  public var minEyeDistance: CoreFoundation.CGFloat
  public var maxEyeDistance: CoreFoundation.CGFloat
  public var minEyePixelDistance: CoreFoundation.CGFloat
  public var checkFacePosition: Swift.Bool
  public var minEyeY: CoreFoundation.CGFloat
  public var maxEyeY: CoreFoundation.CGFloat
  public var horisontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var checkFaceAngle: Swift.Bool
  public var maxEyeRollAngle: CoreFoundation.CGFloat
  public var maxNoseYaw: CoreFoundation.CGFloat
  public var maxVisionRotation: Swift.Float
  public var checkExposition: Swift.Bool
  public var minLuminosity: Swift.Double
}
extension IDCameraController.IDCameraControllerBase {
  @_Concurrency.MainActor(unsafe) public static var iadAvailable: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func prepareForIAD()
  @_Concurrency.MainActor(unsafe) public func createIADBundle(key: Foundation.Data? = nil) throws -> Foundation.Data
  @_spi(PrivateClient) public enum IDIADImageFormat {
    @_spi(PrivateClient) case png
    @_spi(PrivateClient) case jpeg(CoreFoundation.CGFloat)
  }
  @_spi(PrivateClient) @_Concurrency.MainActor(unsafe) public func createIADBundle(format: IDCameraController.IDCameraControllerBase.IDIADImageFormat = .jpeg(1), key: Foundation.Data? = nil) throws -> Foundation.Data
  @_Concurrency.MainActor(unsafe) public func getEncodedImage() -> Foundation.Data?
}
@_spi(Private) @_hasMissingDesignatedInitializers public class DeviceChecker {
  @_spi(Private) public static func isRunningOnMac(ignoreSimulator: Swift.Bool = false) -> Swift.Bool
  @_spi(Private) @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IDCameraControllerBase : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any IDCameraController.IDCameraControllerDelegate)?
  @_Concurrency.MainActor(unsafe) public var cameraPosition: AVFoundation.AVCaptureDevice.Position
  @_Concurrency.MainActor(unsafe) public var cameraResolution: AVFoundation.AVCaptureSession.Preset
  @_Concurrency.MainActor(unsafe) public var faceDetectorSettings: IDCameraController.FaceDetectorSettings? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowToTakeManually: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var allowToPreviewBeforeSending: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var debugMode: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var ignoresLifecycleEvents: Swift.Bool
  @_spi(PrivateClient) @_Concurrency.MainActor(unsafe) public var allowRunningOnMac: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var currentMode: IDCameraController.IDCameraControllerBase.ViewMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var image: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var lastPhotoCapturedAutomatically: Swift.Bool
  @_spi(Private) @_Concurrency.MainActor(unsafe) public var takeMultiplePhotos: Swift.Bool
  @_spi(Private) @_Concurrency.MainActor(unsafe) public var multiplePhotoContainer: IDCameraController.MultiplePhotoContainer {
    get
  }
  @_spi(Private) @_Concurrency.MainActor(unsafe) public var multiplePhotoContainerManual: IDCameraController.MultiplePhotoContainer {
    get
  }
  @_spi(Private) @_Concurrency.MainActor(unsafe) public var multipleImages: [UIKit.UIImage]? {
    get
  }
  @_spi(Private) @_Concurrency.MainActor(unsafe) public var multiplePhotoTimeSpread: Foundation.TimeInterval? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var faceCaptureBoundaries: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor(unsafe) open var videoPreviewContainer: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func instantiate() -> IDCameraController.IDCameraViewController?
  @_Concurrency.MainActor(unsafe) public static var authorizationStatus: AVFoundation.AVAuthorizationStatus {
    get
  }
  @_Concurrency.MainActor(unsafe) public static func requestAccess(completionHandler handler: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func reset()
  @_Concurrency.MainActor(unsafe) public func prepareForCapture()
  @_Concurrency.MainActor(unsafe) public func startRunning()
  @_Concurrency.MainActor(unsafe) public func stopRunning()
  @_Concurrency.MainActor(unsafe) open func addPreviewLayer(_ previewLayer: AVFoundation.AVCaptureVideoPreviewLayer)
  @objc @IBAction @_Concurrency.MainActor(unsafe) public func captureButtonPressed()
  @objc @IBAction @_Concurrency.MainActor(unsafe) public func retakeButtonPressed(_ sender: UIKit.UIButton)
  @objc @IBAction @_Concurrency.MainActor(unsafe) public func cancelButtonPressed(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) public func setCurrentMode(_ mode: IDCameraController.IDCameraControllerBase.ViewMode, message: Swift.String? = nil, allowRetake: Swift.Bool? = nil)
  @_Concurrency.MainActor(unsafe) open func UIModeDidChange(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func setFaceResult(_ result: IDCameraController.FaceDetectorResult, momentary: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func setMessage(_ message: Swift.String?, isError: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IDCameraController.IDCameraControllerBase {
  public enum ViewMode : Swift.Equatable {
    case idle
    case capture
    case busy
    case readyToSend
    case result
    case resultSuccess
    case resultFailure
    case custom(_: IDCameraController.IDCameraControllerBase.ViewMode.CustomViewMode)
    public var isResultState: Swift.Bool {
      get
    }
    public struct CustomViewMode : Swift.Equatable {
      public static func new() -> IDCameraController.IDCameraControllerBase.ViewMode.CustomViewMode
      public var name: Swift.String?
      public var color: UIKit.UIColor
      public var image: UIKit.UIImage?
      public var interactive: Swift.Bool
      public var flashingDot: Swift.Bool
      public static func == (a: IDCameraController.IDCameraControllerBase.ViewMode.CustomViewMode, b: IDCameraController.IDCameraControllerBase.ViewMode.CustomViewMode) -> Swift.Bool
    }
    public static func == (a: IDCameraController.IDCameraControllerBase.ViewMode, b: IDCameraController.IDCameraControllerBase.ViewMode) -> Swift.Bool
  }
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case cameraPermissionDenied
    case initializationError(_: Swift.String? = nil)
    case photoCaptureError
    case faceDetectorError(_: Swift.String? = nil)
    case platformNotAllowed(_: Swift.String? = nil)
    case error(_: Swift.String? = nil)
    public var errorDescription: Swift.String? {
      get
    }
  }
}
public protocol IDCameraControllerDelegate : AnyObject {
  func cameraController(_ controller: IDCameraController.IDCameraControllerBase, didCaptureImage image: UIKit.UIImage)
  func cameraController(_ controller: IDCameraController.IDCameraControllerBase, didEncounterError error: IDCameraController.IDCameraControllerBase.Error)
  func cameraControllerUserDidPressResultButton(_ controller: IDCameraController.IDCameraControllerBase)
  func cameraControllerUserDidPressRetakeButton(_ controller: IDCameraController.IDCameraControllerBase)
  func cameraControllerShouldShowFaceDetectionMessage(_ controller: IDCameraController.IDCameraControllerBase, result: IDCameraController.FaceDetectorResult) -> Swift.Bool
}
extension IDCameraController.IDCameraControllerDelegate {
  public func cameraControllerUserDidPressRetakeButton(_ controller: IDCameraController.IDCameraControllerBase)
  public func cameraControllerShouldShowFaceDetectionMessage(_ controller: IDCameraController.IDCameraControllerBase, result: IDCameraController.FaceDetectorResult) -> Swift.Bool
}
@_spi(Private) @_hasMissingDesignatedInitializers public class MultiplePhotoContainer {
  @_spi(Private) public var requiredCount: Swift.Int
  @_spi(Private) public var minDelayBetween: Swift.Double
  @_spi(Private) public var maxDelayBetween: Swift.Double
  @_spi(Private) public var images: [IDCameraController.IDImage] {
    @_spi(Private) get
  }
  @_spi(Private) @objc deinit
}
extension IDCameraController.FaceLightUpSettings.ValueType : Swift.Equatable {}
extension IDCameraController.FaceLightUpSettings.ValueType : Swift.Hashable {}
