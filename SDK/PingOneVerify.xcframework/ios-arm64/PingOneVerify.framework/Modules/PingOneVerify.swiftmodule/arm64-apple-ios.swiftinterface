// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PingOneVerify
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import ARKit
import AVFAudio
import AVFoundation
import Accelerate
import BlinkID
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMedia
import CoreMotion
import DeveloperToolsSupport
import Foundation
import GeoLocationProvider
import MobileCoreServices
import NeoInterfaces
@_exported import PingOneVerify
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import VideoToolbox
import Vision
import VoiceSdk
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_hasMissingDesignatedInitializers @objc public class ClientBuilderError : ObjectiveC.NSObject {
  @objc public var localizedDescription: Swift.String!
  public enum BuilderError : Swift.Error {
    case missingRootViewController
    case missingDocumentSubmissionListener
    case missingNetworkConnection
    case invalidUrl
    public static func == (a: PingOneVerify.ClientBuilderError.BuilderError, b: PingOneVerify.ClientBuilderError.BuilderError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class CameraOverlayView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var previewRectFrame: CoreFoundation.CGRect?
  @_Concurrency.MainActor @preconcurrency public var overlayBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var drawOutline: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public class CompletionHandler<T> {
  public init()
  public func setResult(_ value: T)
  public func setError(_ error: any Swift.Error)
  @discardableResult
  public func onResult(_ resultHandler: @escaping (T) -> Swift.Void) -> PingOneVerify.CompletionHandler<T>
  @discardableResult
  public func onError(_ errorHandler: @escaping (any Swift.Error) -> Swift.Void) -> PingOneVerify.CompletionHandler<T>
  @objc deinit
}
extension PingOneVerify.IDCameraControllerBase {
  @_Concurrency.MainActor @preconcurrency public static var iadAvailable: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func prepareForIAD()
  @_Concurrency.MainActor @preconcurrency public func createIADBundle(key: Foundation.Data? = nil, keyId: Swift.String? = nil, payloadSize: PingOneVerify.IDCameraControllerBase.PayloadSize? = .normal) throws -> Foundation.Data
}
@objc public class PhoneCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  public var otpDestination: Swift.String?
  public var otpSession: PingOneVerify.OtpSession?
  public var keyboardHint: Swift.String
  public var keyboardType: UIKit.UIKeyboardType
  public var contentType: UIKit.UITextContentType
  public var regex: Swift.String
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, keyboardType: UIKit.UIKeyboardType? = nil, contentType: UIKit.UITextContentType? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  @objc public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  public func setOtpDestination(otpDestination: Swift.String?)
  public func setOtpSession(otpSession: PingOneVerify.OtpSession?)
  @objc deinit
}
public struct IadPayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class DocumentSubmissionResponse : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.String!
  @objc public var document: [Swift.String : Swift.String]?
  public var documentStatus: [Swift.String : PingOneVerify.DocumentStatus]!
  public var documentSubmissionStatus: PingOneVerify.DocumentSubmissionStatus!
  public var geolocation: PingOneVerify.Geolocation?
  public var retry: PingOneVerify.Retry?
  public var createdAt: Swift.String!
  public var updatedAt: Swift.String!
  public var expiresAt: Swift.String!
  public var iad: PingOneVerify.IadPayload?
  public func encode(to encoder: any Swift.Encoder) throws
  public func getDocument() -> [Swift.String : Swift.String]?
  public func getDocumentStatus() -> [Swift.String : PingOneVerify.DocumentStatus]
  public func getDocumentSubmissionStatus() -> PingOneVerify.DocumentSubmissionStatus
  public func getCreatedAt() -> Swift.String
  public func getUpdatedAt() -> Swift.String
  public func getExpiresAt() -> Swift.String
  public func setDocument(document: [Swift.String : Swift.String])
  public func setDocumentStatus(documentStatus: [Swift.String : PingOneVerify.DocumentStatus])
  public func setDocumentSubmissionStatus(documentSubmissionStatus: PingOneVerify.DocumentSubmissionStatus)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Geolocation : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Retry : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Step : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Feedback : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension BlinkID.MBDriverLicenseDetailedInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BlinkID.MBClassInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public class NoRequirements : PingOneVerify.RequirementsProtocol, Swift.Decodable {
  @objc public var requirementsValue: PingOneVerify.Requirements
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class UIAppearanceSettings : ObjectiveC.NSObject {
  @objc public func setLogoImage(_ image: UIKit.UIImage) -> PingOneVerify.UIAppearanceSettings
  @objc public func setBodyTextColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setHeadingTextColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setBackgroundColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setNavigationBarColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setNavigationBarTextColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setSolidButtonAppearance(_ buttonAppearance: PingOneVerify.ButtonAppearance) -> PingOneVerify.UIAppearanceSettings
  @objc public func setBorderedButtonAppearance(_ buttonAppearance: PingOneVerify.ButtonAppearance) -> PingOneVerify.UIAppearanceSettings
  @objc override dynamic public init()
  @objc deinit
}
extension BlinkID.MBBarcodeDriverLicenseDetailedInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class IDImage : ObjectiveC.NSObject {
  public var timestamp: Foundation.Date
  public var timestampFromSessionStart: Foundation.TimeInterval?
  public var photoIndex: Swift.Int
  public var mirrored: Swift.Bool
  public var size: CoreFoundation.CGSize? {
    get
  }
  public var pixelBufferFormat: Darwin.OSType? {
    get
  }
  @objc override dynamic public init()
  public init(withUIImage image: UIKit.UIImage)
  public var hasData: Swift.Bool {
    get
  }
  public var sampleBuffer: CoreMedia.CMSampleBuffer? {
    get
    set
  }
  public func releaseSampleBuffer()
  public var cvPixelBuffer: CoreVideo.CVPixelBuffer? {
    get
    set
  }
  public var uiImage: UIKit.UIImage? {
    get
    set
  }
  public var jpegData: Foundation.Data? {
    get
    set
  }
  public var pngData: Foundation.Data? {
    get
    set
  }
  public func clearCache()
  @objc deinit
}
extension PingOneVerify.IDImage {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc public enum DocumentSubmissionStatus : Swift.Int, Swift.Codable, Swift.RawRepresentable {
  case not_started = 0
  case started = 1
  case completed = 2
  case process = 3
  public typealias RawValue = Swift.String
  public var rawValue: PingOneVerify.DocumentSubmissionStatus.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.DocumentSubmissionStatus.RawValue)
}
public class ValueRequirements : PingOneVerify.RequirementsProtocol, Swift.Decodable {
  @objc public var requirementsValue: PingOneVerify.Requirements
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public class EmailCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  public var otpDestination: Swift.String?
  public var otpSession: PingOneVerify.OtpSession?
  public var keyboardHint: Swift.String
  public var keyboardType: UIKit.UIKeyboardType
  public var contentType: UIKit.UITextContentType
  public var regex: Swift.String
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, keyboardType: UIKit.UIKeyboardType? = nil, contentType: UIKit.UITextContentType? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  @objc public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  public func setOtpDestination(otpDestination: Swift.String?)
  public func setOtpSession(otpSession: PingOneVerify.OtpSession?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CenterTextLayer : QuartzCore.CATextLayer {
  @objc override dynamic public func draw(in ctx: CoreGraphics.CGContext)
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol DocumentSubmissionListener {
  @objc func onDocumentSubmitted(response: PingOneVerify.DocumentSubmissionResponse)
  @objc func onSubmissionComplete(status: PingOneVerify.DocumentSubmissionStatus)
  @objc func onSubmissionError(error: PingOneVerify.DocumentSubmissionError)
}
@objc public class IdCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  @objc public init(documentType: PingOneVerify.DocumentClass, optional: Swift.Bool, requirements: (any PingOneVerify.RequirementsProtocol)? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SampleBufferUtils {
  public class func getCroppedSmapleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer, for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer?) -> CoreMedia.CMSampleBuffer?
  open class func getSampleBufferFromUIImage(image: UIKit.UIImage) -> CoreMedia.CMSampleBuffer?
  open class func getUIImageFromSampleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer, for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer? = nil) -> UIKit.UIImage?
  open class func getImageFromSampleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer) -> UIKit.UIImage?
  @objc deinit
}
extension BlinkID.MBStringResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LabelCellContent {
}
@_hasMissingDesignatedInitializers public class SCFace {
  @objc deinit
}
extension BlinkID.MBImageAnalysisResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BlinkID.MBDateResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIColor {
  public var redValue: CoreFoundation.CGFloat {
    get
  }
  public var greenValue: CoreFoundation.CGFloat {
    get
  }
  public var blueValue: CoreFoundation.CGFloat {
    get
  }
  public var alphaValue: CoreFoundation.CGFloat {
    get
  }
  convenience public init(hexString: Swift.String)
}
extension PingOneVerify.IDCameraControllerBase {
  public enum ViewMode : Swift.Equatable {
    case idle
    case capture
    case busy
    case readyToSend
    case result
    case resultSuccess
    case resultFailure
    case custom(_: PingOneVerify.IDCameraControllerBase.ViewMode.CustomViewMode)
    public var isResultState: Swift.Bool {
      get
    }
    public struct CustomViewMode : Swift.Equatable {
      public static func new() -> PingOneVerify.IDCameraControllerBase.ViewMode.CustomViewMode
      public var name: Swift.String?
      public var color: UIKit.UIColor
      public var image: UIKit.UIImage?
      public var interactive: Swift.Bool
      public var flashingDot: Swift.Bool
      public static func == (a: PingOneVerify.IDCameraControllerBase.ViewMode.CustomViewMode, b: PingOneVerify.IDCameraControllerBase.ViewMode.CustomViewMode) -> Swift.Bool
    }
    public static func == (a: PingOneVerify.IDCameraControllerBase.ViewMode, b: PingOneVerify.IDCameraControllerBase.ViewMode) -> Swift.Bool
  }
  public enum PayloadSize {
    case normal
    case small
    public static func == (a: PingOneVerify.IDCameraControllerBase.PayloadSize, b: PingOneVerify.IDCameraControllerBase.PayloadSize) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PhotoCaptureMode : Swift.String {
    case auto, manual, auto_and_manual
    public var canCaptureManually: Swift.Bool {
      get
    }
    public var canCaptureAuto: Swift.Bool {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case cameraPermissionDenied
    case initializationError(_: Swift.String? = nil)
    case photoCaptureError
    case faceDetectorError(_: Swift.String? = nil)
    case platformNotAllowed(_: Swift.String? = nil)
    case error(_: Swift.String? = nil)
    public var errorDescription: Swift.String? {
      get
    }
  }
}
public protocol IDCameraControllerDelegate : AnyObject {
  func cameraController(_ controller: PingOneVerify.IDCameraControllerBase, didCaptureImage image: PingOneVerify.IDImage)
  func cameraController(_ controller: PingOneVerify.IDCameraControllerBase, didEncounterError error: PingOneVerify.IDCameraControllerBase.Error)
  func cameraControllerDidUpdateLiveImage(_ controller: PingOneVerify.IDCameraControllerBase, image: PingOneVerify.IDImage)
  func cameraControllerDidUpdateFaceResult(_ controller: PingOneVerify.IDCameraControllerBase, result: PingOneVerify.FaceDetectorResult, image: PingOneVerify.IDImage?, momentary: Swift.Bool)
  func cameraControllerDidUpdateViewMode(_ controller: PingOneVerify.IDCameraControllerBase)
  func cameraControllerUserDidPressResultButton(_ controller: PingOneVerify.IDCameraControllerBase)
  func cameraControllerUserDidPressRetakeButton(_ controller: PingOneVerify.IDCameraControllerBase)
}
extension PingOneVerify.IDCameraControllerDelegate {
  public func cameraControllerDidUpdateViewMode(_ controller: PingOneVerify.IDCameraControllerBase)
  public func cameraControllerUserDidPressRetakeButton(_ controller: PingOneVerify.IDCameraControllerBase)
  public func cameraControllerDidUpdateLiveImage(_ controller: PingOneVerify.IDCameraControllerBase, image: PingOneVerify.IDImage)
  public func cameraControllerDidUpdateFaceResult(_ controller: PingOneVerify.IDCameraControllerBase, result: PingOneVerify.FaceDetectorResult, image: PingOneVerify.IDImage?, momentary: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class IDCameraControllerBase : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PingOneVerify.IDCameraControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var cameraPosition: AVFoundation.AVCaptureDevice.Position
  @available(*, deprecated)
  @_Concurrency.MainActor @preconcurrency public var cameraResolution: AVFoundation.AVCaptureSession.Preset {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public var captureMode: PingOneVerify.IDCameraControllerBase.PhotoCaptureMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var faceDetectorSettings: PingOneVerify.FaceDetectorSettings {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var allowToPreviewBeforeSending: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var showFaceDetectionErrors: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var stopAfterCapture: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var debugMode: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var runInBackground: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentViewMode: PingOneVerify.IDCameraControllerBase.ViewMode {
    get
    set
  }
  @available(*, deprecated)
  @_Concurrency.MainActor @preconcurrency open var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var capturedImage: PingOneVerify.IDImage?
  @_Concurrency.MainActor @preconcurrency public var lastLiveImage: PingOneVerify.IDImage? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var lastPhotoCapturedAutomatically: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var canTakePhotoNow: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var faceCaptureBoundaries: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var videoPreviewContainer: UIKit.UIView? {
    get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public static func instantiate() -> PingOneVerify.IDCameraViewController?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency public static var authorizationStatus: AVFoundation.AVAuthorizationStatus {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func requestAccess(completionHandler handler: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func reset()
  @_Concurrency.MainActor @preconcurrency public func prepareForCapture()
  @_Concurrency.MainActor @preconcurrency public func startRunning()
  @_Concurrency.MainActor @preconcurrency public var isRunning: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func stopRunning()
  @_Concurrency.MainActor @preconcurrency open func addPreviewLayer(_ previewLayer: AVFoundation.AVCaptureVideoPreviewLayer)
  @objc @IBAction @_Concurrency.MainActor @preconcurrency public func captureButtonPressed()
  @objc @IBAction @_Concurrency.MainActor @preconcurrency public func retakeButtonPressed(_ sender: UIKit.UIButton)
  @objc @IBAction @_Concurrency.MainActor @preconcurrency public func cancelButtonPressed(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency public func setCurrentViewMode(_ mode: PingOneVerify.IDCameraControllerBase.ViewMode, message: Swift.String? = nil, allowRetake: Swift.Bool? = nil)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func takePhoto() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func UIModeDidChange(animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency open func setFaceResult(_ result: PingOneVerify.FaceDetectorResult, momentary: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency open func setMessage(_ message: Swift.String?, isError: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension BlinkID.MBBarcodeResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RequirementsFactory {
}
public enum FaceDetectorResult : Swift.Equatable {
  case fire
  case ok
  case tooManyFaces
  case faceNotFound
  case faceTooSmall
  case faceTooBig
  case faceCropped
  case faceOffCenter
  case faceAngled
  case movementDetected
  case photoLowQuality
  case photoBlurred
  case photoBadLighting
  case customUserError(Swift.String)
  case faceDetectionError(Swift.String)
  case faceDetectionIgnorableError(Swift.String)
  case faceDetectionFatalError(Swift.String)
  case unknownError
  public var message: Swift.String {
    get
  }
  public var isError: Swift.Bool {
    get
  }
  public static func == (a: PingOneVerify.FaceDetectorResult, b: PingOneVerify.FaceDetectorResult) -> Swift.Bool
}
public struct FaceDetectorSettings {
  public init(enabled: Swift.Bool = true)
  public var enabled: Swift.Bool
  public var showsLandmarks: Swift.Bool
  public var errorFirstTimeDelay: Swift.Double
  public var errorDelay: Swift.Double
  public var errorHideDelay: Swift.Double
  public var errorChangeDelay: Swift.Double
  public var fireDelay: Swift.Double
  public var nativeFaceDetectorSettings: PingOneVerify.FaceDetectorNativeFacePositionParameters
  public mutating func useEngines(_ detectors: PingOneVerify.FaceDetectorEngines)
  public mutating func useDefaultEngines()
  public mutating func addCustomFaceDetectorClosure(_ closure: @escaping PingOneVerify.FaceDetectorClosure)
}
public struct FaceDetectorEngines : Swift.OptionSet {
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let nativeVision: PingOneVerify.FaceDetectorEngines
  public static let motionDetector: PingOneVerify.FaceDetectorEngines
  public static let defaultEngines: PingOneVerify.FaceDetectorEngines
  public typealias ArrayLiteralElement = PingOneVerify.FaceDetectorEngines
  public typealias Element = PingOneVerify.FaceDetectorEngines
  public typealias RawValue = Swift.Int
}
extension BlinkID.MBBarcodeVehicleClassInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc extension PingOneVerify.PingOneVerifyClient {
  @objc public class Builder : ObjectiveC.NSObject {
    public init(isOverridingAssets: Swift.Bool)
    @discardableResult
    @objc public func setRootViewController(_ rootViewController: UIKit.UIViewController) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setListener(_ listener: any PingOneVerify.DocumentSubmissionListener) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setQrString(qrString: Swift.String) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setDocumentCaptureSettings(documentCaptureSettings: [any PingOneVerify.DocumentCaptureSettingsContract]) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setUIAppearance(_ appearanceSettings: PingOneVerify.UIAppearanceSettings) -> PingOneVerify.PingOneVerifyClient.Builder
    @objc public func startVerification(onComplete: @escaping (_ pingOneVerifyClient: PingOneVerify.PingOneVerifyClient?, _ error: PingOneVerify.ClientBuilderError?) -> Swift.Void)
    @objc deinit
  }
}
@objc public class SelfieCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  final public let captureTime: Foundation.TimeInterval
  final public let shouldCaptureAfterTimeout: Swift.Bool
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  @objc public init(captureTime: Foundation.TimeInterval = 45, shouldCaptureAfterTimeout: Swift.Bool = true, optional: Swift.Bool, requirements: (any PingOneVerify.RequirementsProtocol)? = nil)
  @objc deinit
}
public struct FaceDetectorNativeFacePositionParameters {
  public init()
  public var checkFaceSize: Swift.Bool
  public var minEyeDistance: CoreFoundation.CGFloat
  public var maxEyeDistance: CoreFoundation.CGFloat
  public var minEyePixelDistance: CoreFoundation.CGFloat
  public var checkFacePosition: Swift.Bool
  public var minEyeY: CoreFoundation.CGFloat
  public var maxEyeY: CoreFoundation.CGFloat
  public var horisontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var checkFaceAngle: Swift.Bool
  public var maxEyeRollAngle: CoreFoundation.CGFloat
  public var maxNoseYaw: CoreFoundation.CGFloat
  public var maxVisionRotation: Swift.Float
  public var checkExposition: Swift.Bool
  public var minLuminosity: Swift.Double
}
public struct UtilsCameraInfo {
  public static var allCameraDeviceTypes: [AVFoundation.AVCaptureDevice.DeviceType] {
    get
  }
  public func cameraSupportResolutionHD4K(forFrontCamera: Swift.Bool = true) -> (fhd: Swift.Bool, res4k: Swift.Bool, cameraType: Swift.String)
}
extension BlinkID.MBMrzResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class IDCameraViewController : PingOneVerify.IDCameraControllerBase {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency override open var videoPreviewContainer: UIKit.UIView? {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency public var customViewContainer: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency override open var capturedImage: PingOneVerify.IDImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public var faceDetectorSettings: PingOneVerify.FaceDetectorSettings {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override open var faceCaptureBoundaries: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var bottomBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @IBAction @_Concurrency.MainActor @preconcurrency @objc override public func captureButtonPressed()
  @_Concurrency.MainActor @preconcurrency override open func UIModeDidChange(animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency open func setButtonState(_ mode: PingOneVerify.IDCameraControllerBase.ViewMode)
  @_Concurrency.MainActor @preconcurrency override open func reset()
  @_Concurrency.MainActor @preconcurrency override open func setMessage(_ message: Swift.String?, isError: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency open func setAttributedMessage(_ message: Foundation.NSAttributedString?, isError: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency override open func setFaceResult(_ result: PingOneVerify.FaceDetectorResult, momentary: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency open func messageForFaceResult(_ result: PingOneVerify.FaceDetectorResult) -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PingOneVerify.IDCameraViewController {
  @_Concurrency.MainActor @preconcurrency public func setPreviewBlurred(style: UIKit.UIBlurEffect.Style?, animated: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public var bottomBarHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setBottomBarHidden(_ hidden: Swift.Bool, animated: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func useOvalMask(_ useOvalMask: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setBottomBarBackgroundBlurred(_ style: UIKit.UIBlurEffect.Style)
  @_Concurrency.MainActor @preconcurrency public func setBottomBarBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setCustomViewTakesFullScreen(_ fullscreen: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setFaceFrameUnderBottomBar(_ under: Swift.Bool)
}
@objc public protocol DocumentCaptureSettingsContract {
  @objc var documentType: PingOneVerify.DocumentClass { get set }
  @objc var currentStep: Swift.Int { get set }
  @objc var totalSteps: Swift.Int { get set }
  @objc var optional: Swift.Bool { get set }
  @objc var requirements: (any PingOneVerify.RequirementsProtocol)? { get set }
}
public struct ImageCellContent {
}
@objc public enum DocumentClass : Swift.Int, Swift.CaseIterable, Swift.Codable, Swift.RawRepresentable {
  case SELFIE = 0
  case DRIVER_LICENSE = 1
  case PASSPORT = 2
  case GOVERNMENT_ID = 3
  case EMAIL = 4
  case PHONE = 5
  case OTP = 6
  case OTHER = 7
  case VOICE = 8
  public typealias RawValue = Swift.String
  public var iconName: Swift.String {
    get
  }
  public var rawValue: PingOneVerify.DocumentClass.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.DocumentClass.RawValue)
  public typealias AllCases = [PingOneVerify.DocumentClass]
  nonisolated public static var allCases: [PingOneVerify.DocumentClass] {
    get
  }
}
extension PingOneVerify.DocumentClass : Swift.Equatable {
  public static func == (lhs: PingOneVerify.DocumentClass, rhs: PingOneVerify.DocumentClass) -> Swift.Bool
}
@propertyWrapper public struct Atomic<Value> {
  public init(wrappedValue value: Value)
  public var wrappedValue: Value {
    get
    set
  }
}
extension BlinkID.MBDataMatchResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BlinkID.MBFieldState : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol RequirementsProtocol {
  @objc var requirementsValue: PingOneVerify.Requirements { get set }
}
extension BlinkID.MBVehicleClassInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class DocumentSubmissionError : ObjectiveC.NSObject {
  @objc public var code: Swift.String!
  @objc public var localizedDescription: Swift.String!
  public func getErrorCode() -> Swift.String
  public func getErrorMessage() -> Swift.String
  @objc deinit
}
@objc public enum DocumentStatus : Swift.Int, Swift.Codable, Swift.RawRepresentable {
  case REQUIRED = 0
  case OPTIONAL = 1
  case COLLECTED = 2
  case PROCESSED = 3
  case SKIPPED = 4
  public typealias RawValue = Swift.String
  public var rawValue: PingOneVerify.DocumentStatus.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.DocumentStatus.RawValue)
}
@objc public class VoiceCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  public var enrollment: Swift.Bool!
  public var numberOfRecordingsRequired: Swift.Int!
  public var numberOfCompletedRecordings: Swift.Int!
  public var isTextDependent: Swift.Bool
  public var voicePhrase: PingOneVerify.VoicePhrase?
  @objc public init(optional: Swift.Bool, requirements: (any PingOneVerify.RequirementsProtocol)? = nil, isTextDependent: Swift.Bool = true)
  public func updateFromVerifyTransaction(verifyTransaction: PingOneVerify.VerifyTransaction)
  @objc deinit
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
}
@objc public class ButtonAppearance : ObjectiveC.NSObject, Swift.Codable {
  public init(backgroundColor: UIKit.UIColor, textColor: UIKit.UIColor, borderColor: UIKit.UIColor)
  public func getBackgroundColor() -> UIKit.UIColor
  public func getTextColor() -> UIKit.UIColor
  public func getBorderColor() -> UIKit.UIColor
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class PingOneVerifyClient : ObjectiveC.NSObject {
  public func pollForVerificationStatus(_ pollingInterval: Foundation.TimeInterval? = nil)
  public func stopPolling()
  @objc deinit
}
@objc public enum OtpStatus : Swift.Int, Swift.Codable, Swift.RawRepresentable {
  case REQUESTED = 0
  case IN_PROGRESS = 1
  case OTP_SENT = 2
  case SUCCESS = 3
  case FAIL = 4
  case OTP_RETRYABLE = 5
  public typealias RawValue = Swift.String
  public var rawValue: PingOneVerify.OtpStatus.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.OtpStatus.RawValue)
}
extension BlinkID.MBBlinkIdMultiSideRecognizerResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_Concurrency.MainActor @preconcurrency public class OvalCameraOverlayView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var previewRectFrame: CoreFoundation.CGRect?
  @_Concurrency.MainActor @preconcurrency public var overlayBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var drawOutline: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func updateOutlineColor(_ newColor: UIKit.UIColor)
  @objc deinit
}
@objc public class Requirements : ObjectiveC.NSObject, Swift.Decodable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct DocumentRequirements : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LabelCell : UIKit.UITableViewCell {
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias FaceDetectorClosure = (PingOneVerify.IDImage, @escaping (PingOneVerify.FaceDetectorResult) -> Swift.Void) -> Swift.Void
extension BlinkID.MBDate : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Swift.String {
  public var localized: Swift.String {
    get
  }
  public func localized(in fileName: Swift.String) -> Swift.String
  public func localized(tableName: Swift.String, bundle: Foundation.Bundle?, defaultValue: Swift.String) -> Swift.String
  public func localized(in fileName: Swift.String, with args: any Swift.CVarArg...) -> Swift.String
  public func localized(_ args: any Swift.CVarArg...) -> Swift.String
}
public struct VerifyTransaction {
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public func preventRepeatedClicks(inNext seconds: Foundation.TimeInterval = 2)
}
extension Foundation.Data {
  public func toString() -> Swift.String
}
extension Swift.String {
  public func toData() -> Foundation.Data
}
public struct OtpSessions : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct OtpSession : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct VoicePhrase : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension PingOneVerify.DocumentCaptureSettingsContract {
  public func updateFromVerifyTransaction(verifyTransaction: PingOneVerify.VerifyTransaction)
}
extension BlinkID.MBVizResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CameraView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Double {
  public var seconds: Swift.Int {
    get
  }
  public var minutes: Swift.Int {
    get
  }
  public var stringDescription: Swift.String {
    get
  }
}
public class PollingHelper {
  public static let DEFAULT_POLLING_INTERVAL_SEC: Swift.Double
  public init(withInterval pollingInterval: Foundation.TimeInterval, action: @escaping (PingOneVerify.PollingHelper) -> Swift.Void)
  public func startPolling()
  public func stopPolling()
  @objc deinit
}
extension PingOneVerify.PingOneVerifyClient : NeoInterfaces.GeoLocationProviderListener {
  public func onGeoLocationCaptured(locations: [CoreLocation.CLLocation])
  public func requestFailedWithError(_ error: CoreLocation.CLError?)
  public func onGeoLocationCaptured(location: [Swift.String : Swift.Double])
}
extension PingOneVerify.PingOneVerifyClient.Builder : NeoInterfaces.GeoLocationProviderListener {
  public func onGeoLocationCaptured(locations: [CoreLocation.CLLocation])
  public func requestFailedWithError(_ error: CoreLocation.CLError?)
}
public func logLine(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func log(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func logerror(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func logattention(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public struct VerifyApiLinks {
}
extension PingOneVerify.ClientBuilderError.BuilderError : Swift.Equatable {}
extension PingOneVerify.ClientBuilderError.BuilderError : Swift.Hashable {}
extension PingOneVerify.DocumentSubmissionStatus : Swift.Equatable {}
extension PingOneVerify.DocumentSubmissionStatus : Swift.Hashable {}
extension PingOneVerify.IDCameraControllerBase.PayloadSize : Swift.Equatable {}
extension PingOneVerify.IDCameraControllerBase.PayloadSize : Swift.Hashable {}
extension PingOneVerify.IDCameraControllerBase.PhotoCaptureMode : Swift.Equatable {}
extension PingOneVerify.IDCameraControllerBase.PhotoCaptureMode : Swift.Hashable {}
extension PingOneVerify.IDCameraControllerBase.PhotoCaptureMode : Swift.RawRepresentable {}
extension PingOneVerify.DocumentClass : Swift.Hashable {}
extension PingOneVerify.DocumentStatus : Swift.Equatable {}
extension PingOneVerify.DocumentStatus : Swift.Hashable {}
extension PingOneVerify.OtpStatus : Swift.Equatable {}
extension PingOneVerify.OtpStatus : Swift.Hashable {}
