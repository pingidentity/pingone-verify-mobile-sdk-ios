// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PingOneVerify
import ARKit
import AVFAudio
import AVFoundation
import Accelerate
import BlinkID
import CoreImage
import CoreMedia
import DeveloperToolsSupport
import Foundation
@_exported import PingOneVerify
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import VideoToolbox
import Vision
import VoiceSdk
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc public class ClientBuilderError : ObjectiveC.NSObject {
  @objc public var localizedDescription: Swift.String!
  public enum BuilderError : Swift.Error {
    case missingRootViewController
    case missingDocumentSubmissionListener
    case missingNetworkConnection
    case invalidUrl
    public static func == (a: PingOneVerify.ClientBuilderError.BuilderError, b: PingOneVerify.ClientBuilderError.BuilderError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class CameraOverlayView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var previewRectFrame: CoreFoundation.CGRect?
  @_Concurrency.MainActor(unsafe) public var overlayBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var drawOutline: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public class CompletionHandler<T> {
  public init()
  public func setResult(_ value: T)
  public func setError(_ error: any Swift.Error)
  @discardableResult
  public func onResult(_ resultHandler: @escaping (T) -> Swift.Void) -> PingOneVerify.CompletionHandler<T>
  @discardableResult
  public func onError(_ errorHandler: @escaping (any Swift.Error) -> Swift.Void) -> PingOneVerify.CompletionHandler<T>
  @objc deinit
}
@objc public class PhoneCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  public var otpDestination: Swift.String?
  public var otpSession: PingOneVerify.OtpSession?
  public var keyboardHint: Swift.String
  public var keyboardType: UIKit.UIKeyboardType
  public var contentType: UIKit.UITextContentType
  public var regex: Swift.String
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, keyboardType: UIKit.UIKeyboardType? = nil, contentType: UIKit.UITextContentType? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  @objc public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  public func setOtpDestination(otpDestination: Swift.String?)
  public func setOtpSession(otpSession: PingOneVerify.OtpSession?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DocumentSubmissionResponse : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.String!
  @objc public var document: [Swift.String : Swift.String]?
  public var documentStatus: [Swift.String : PingOneVerify.DocumentStatus]!
  public var documentSubmissionStatus: PingOneVerify.DocumentSubmissionStatus!
  public var createdAt: Swift.String!
  public var updatedAt: Swift.String!
  public var expiresAt: Swift.String!
  public func encode(to encoder: any Swift.Encoder) throws
  public func getDocument() -> [Swift.String : Swift.String]?
  public func getDocumentStatus() -> [Swift.String : PingOneVerify.DocumentStatus]
  public func getDocumentSubmissionStatus() -> PingOneVerify.DocumentSubmissionStatus
  public func getCreatedAt() -> Swift.String
  public func getUpdatedAt() -> Swift.String
  public func getExpiresAt() -> Swift.String
  public func setDocument(document: [Swift.String : Swift.String])
  public func setDocumentStatus(documentStatus: [Swift.String : PingOneVerify.DocumentStatus])
  public func setDocumentSubmissionStatus(documentSubmissionStatus: PingOneVerify.DocumentSubmissionStatus)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
extension BlinkID.MBDriverLicenseDetailedInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BlinkID.MBClassInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public class NoRequirements : PingOneVerify.RequirementsProtocol, Swift.Decodable {
  @objc public var requirementsValue: PingOneVerify.Requirements
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class UIAppearanceSettings : ObjectiveC.NSObject {
  @objc public func setLogoImage(_ image: UIKit.UIImage) -> PingOneVerify.UIAppearanceSettings
  @objc public func setBodyTextColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setHeadingTextColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setBackgroundColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setNavigationBarColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setNavigationBarTextColor(_ color: UIKit.UIColor) -> PingOneVerify.UIAppearanceSettings
  @objc public func setSolidButtonAppearance(_ buttonAppearance: PingOneVerify.ButtonAppearance) -> PingOneVerify.UIAppearanceSettings
  @objc public func setBorderedButtonAppearance(_ buttonAppearance: PingOneVerify.ButtonAppearance) -> PingOneVerify.UIAppearanceSettings
  @objc override dynamic public init()
  @objc deinit
}
extension BlinkID.MBBarcodeDriverLicenseDetailedInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public enum DocumentSubmissionStatus : Swift.Int, Swift.Codable, Swift.RawRepresentable {
  case not_started = 0
  case started = 1
  case completed = 2
  case process = 3
  public typealias RawValue = Swift.String
  public var rawValue: PingOneVerify.DocumentSubmissionStatus.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.DocumentSubmissionStatus.RawValue)
}
public class ValueRequirements : PingOneVerify.RequirementsProtocol, Swift.Decodable {
  @objc public var requirementsValue: PingOneVerify.Requirements
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public class EmailCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  public var otpDestination: Swift.String?
  public var otpSession: PingOneVerify.OtpSession?
  public var keyboardHint: Swift.String
  public var keyboardType: UIKit.UIKeyboardType
  public var contentType: UIKit.UITextContentType
  public var regex: Swift.String
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, keyboardType: UIKit.UIKeyboardType? = nil, contentType: UIKit.UITextContentType? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  @objc public init(optional: Swift.Bool, keyboardHint: Swift.String? = nil, regex: Swift.String? = nil, requirements: (any PingOneVerify.RequirementsProtocol)?)
  public func setOtpDestination(otpDestination: Swift.String?)
  public func setOtpSession(otpSession: PingOneVerify.OtpSession?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CenterTextLayer : QuartzCore.CATextLayer {
  @objc override dynamic public func draw(in ctx: CoreGraphics.CGContext)
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol DocumentSubmissionListener {
  @objc func onDocumentSubmitted(response: PingOneVerify.DocumentSubmissionResponse)
  @objc func onSubmissionComplete(status: PingOneVerify.DocumentSubmissionStatus)
  @objc func onSubmissionError(error: PingOneVerify.DocumentSubmissionError)
}
@objc public class IdCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  @objc public init(documentType: PingOneVerify.DocumentClass, optional: Swift.Bool, requirements: (any PingOneVerify.RequirementsProtocol)? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SampleBufferUtils {
  public class func getCroppedSmapleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer, for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer?) -> CoreMedia.CMSampleBuffer?
  open class func getSampleBufferFromUIImage(image: UIKit.UIImage) -> CoreMedia.CMSampleBuffer?
  open class func getUIImageFromSampleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer, for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer? = nil) -> UIKit.UIImage?
  open class func getImageFromSampleBuffer(context: CoreImage.CIContext, sampleBuffer: CoreMedia.CMSampleBuffer) -> UIKit.UIImage?
  @objc deinit
}
extension BlinkID.MBStringResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LabelCellContent {
}
@_hasMissingDesignatedInitializers public class SCFace {
  @objc deinit
}
extension BlinkID.MBImageAnalysisResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BlinkID.MBDateResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIColor {
  public var redValue: CoreFoundation.CGFloat {
    get
  }
  public var greenValue: CoreFoundation.CGFloat {
    get
  }
  public var blueValue: CoreFoundation.CGFloat {
    get
  }
  public var alphaValue: CoreFoundation.CGFloat {
    get
  }
  convenience public init(hexString: Swift.String)
}
extension BlinkID.MBBarcodeResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RequirementsFactory {
}
extension BlinkID.MBBarcodeVehicleClassInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc extension PingOneVerify.PingOneVerifyClient {
  @objc public class Builder : ObjectiveC.NSObject {
    public init(isOverridingAssets: Swift.Bool)
    @discardableResult
    @objc public func setRootViewController(_ rootViewController: UIKit.UIViewController) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setListener(_ listener: any PingOneVerify.DocumentSubmissionListener) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setQrString(qrString: Swift.String) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setDocumentCaptureSettings(documentCaptureSettings: [any PingOneVerify.DocumentCaptureSettingsContract]) -> PingOneVerify.PingOneVerifyClient.Builder
    @discardableResult
    @objc public func setUIAppearance(_ appearanceSettings: PingOneVerify.UIAppearanceSettings) -> PingOneVerify.PingOneVerifyClient.Builder
    @objc public func startVerification(onComplete: @escaping (_ pingOneVerifyClient: PingOneVerify.PingOneVerifyClient?, _ error: PingOneVerify.ClientBuilderError?) -> Swift.Void)
    @objc deinit
  }
}
@objc public class SelfieCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  final public let captureTime: Foundation.TimeInterval
  final public let shouldCaptureAfterTimeout: Swift.Bool
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  @objc public init(captureTime: Foundation.TimeInterval = 45, shouldCaptureAfterTimeout: Swift.Bool = true, optional: Swift.Bool, requirements: (any PingOneVerify.RequirementsProtocol)? = nil)
  @objc deinit
}
extension BlinkID.MBMrzResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol DocumentCaptureSettingsContract {
  @objc var documentType: PingOneVerify.DocumentClass { get set }
  @objc var currentStep: Swift.Int { get set }
  @objc var totalSteps: Swift.Int { get set }
  @objc var optional: Swift.Bool { get set }
  @objc var requirements: (any PingOneVerify.RequirementsProtocol)? { get set }
}
public struct ImageCellContent {
}
@objc public enum DocumentClass : Swift.Int, Swift.CaseIterable, Swift.Codable, Swift.RawRepresentable {
  case SELFIE = 0
  case DRIVER_LICENSE = 1
  case PASSPORT = 2
  case GOVERNMENT_ID = 3
  case EMAIL = 4
  case PHONE = 5
  case OTP = 6
  case OTHER = 7
  case VOICE = 8
  public typealias RawValue = Swift.String
  public var iconName: Swift.String {
    get
  }
  public var rawValue: PingOneVerify.DocumentClass.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.DocumentClass.RawValue)
  public typealias AllCases = [PingOneVerify.DocumentClass]
  public static var allCases: [PingOneVerify.DocumentClass] {
    get
  }
}
extension PingOneVerify.DocumentClass : Swift.Equatable {
  public static func == (lhs: PingOneVerify.DocumentClass, rhs: PingOneVerify.DocumentClass) -> Swift.Bool
}
@propertyWrapper public struct Atomic<Value> {
  public init(wrappedValue value: Value)
  public var wrappedValue: Value {
    get
    set
  }
}
extension BlinkID.MBDataMatchResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BlinkID.MBFieldState : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol RequirementsProtocol {
  @objc var requirementsValue: PingOneVerify.Requirements { get set }
}
extension BlinkID.MBVehicleClassInfo : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class DocumentSubmissionError : ObjectiveC.NSObject {
  @objc public var code: Swift.String!
  @objc public var localizedDescription: Swift.String!
  public func getErrorCode() -> Swift.String
  public func getErrorMessage() -> Swift.String
  @objc deinit
}
@objc public enum DocumentStatus : Swift.Int, Swift.Codable, Swift.RawRepresentable {
  case REQUIRED = 0
  case OPTIONAL = 1
  case COLLECTED = 2
  case PROCESSED = 3
  case SKIPPED = 4
  public typealias RawValue = Swift.String
  public var rawValue: PingOneVerify.DocumentStatus.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.DocumentStatus.RawValue)
}
@objc public class VoiceCaptureSettings : ObjectiveC.NSObject, PingOneVerify.DocumentCaptureSettingsContract {
  @objc public var documentType: PingOneVerify.DocumentClass
  @objc public var currentStep: Swift.Int
  @objc public var totalSteps: Swift.Int
  @objc public var optional: Swift.Bool
  @objc public var requirements: (any PingOneVerify.RequirementsProtocol)?
  public var enrollment: Swift.Bool!
  public var numberOfRecordingsRequired: Swift.Int!
  public var numberOfCompletedRecordings: Swift.Int!
  public var isTextDependent: Swift.Bool
  public var voicePhrase: PingOneVerify.VoicePhrase?
  @objc public init(optional: Swift.Bool, requirements: (any PingOneVerify.RequirementsProtocol)? = nil, isTextDependent: Swift.Bool = true)
  public func updateFromVerifyTransaction(verifyTransaction: PingOneVerify.VerifyTransaction)
  @objc deinit
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
}
@objc public class ButtonAppearance : ObjectiveC.NSObject, Swift.Codable {
  public init(backgroundColor: UIKit.UIColor, textColor: UIKit.UIColor, borderColor: UIKit.UIColor)
  public func getBackgroundColor() -> UIKit.UIColor
  public func getTextColor() -> UIKit.UIColor
  public func getBorderColor() -> UIKit.UIColor
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class PingOneVerifyClient : ObjectiveC.NSObject {
  @objc deinit
}
@objc public enum OtpStatus : Swift.Int, Swift.Codable, Swift.RawRepresentable {
  case REQUESTED = 0
  case IN_PROGRESS = 1
  case OTP_SENT = 2
  case SUCCESS = 3
  case FAIL = 4
  case OTP_RETRYABLE = 5
  public typealias RawValue = Swift.String
  public var rawValue: PingOneVerify.OtpStatus.RawValue {
    get
  }
  public init?(rawValue: PingOneVerify.OtpStatus.RawValue)
}
extension BlinkID.MBBlinkIdMultiSideRecognizerResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_Concurrency.MainActor(unsafe) public class OvalCameraOverlayView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var previewRectFrame: CoreFoundation.CGRect?
  @_Concurrency.MainActor(unsafe) public var overlayBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var drawOutline: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func updateOutlineColor(_ newColor: UIKit.UIColor)
  @objc deinit
}
@objc public class Requirements : ObjectiveC.NSObject, Swift.Decodable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct DocumentRequirements : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LabelCell : UIKit.UITableViewCell {
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BlinkID.MBDate : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Swift.String {
  public var localized: Swift.String {
    get
  }
  public func localized(in fileName: Swift.String) -> Swift.String
  public func localized(tableName: Swift.String, bundle: Foundation.Bundle?, defaultValue: Swift.String) -> Swift.String
  public func localized(in fileName: Swift.String, with args: any Swift.CVarArg...) -> Swift.String
  public func localized(_ args: any Swift.CVarArg...) -> Swift.String
}
public struct VerifyTransaction {
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func preventRepeatedClicks(inNext seconds: Foundation.TimeInterval = 2)
}
extension Foundation.Data {
  public func toString() -> Swift.String
}
extension Swift.String {
  public func toData() -> Foundation.Data
}
public struct OtpSessions : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct OtpSession : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct VoicePhrase : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension PingOneVerify.DocumentCaptureSettingsContract {
  public func updateFromVerifyTransaction(verifyTransaction: PingOneVerify.VerifyTransaction)
}
extension BlinkID.MBVizResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CameraView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Double {
  public var seconds: Swift.Int {
    get
  }
  public var minutes: Swift.Int {
    get
  }
  public var stringDescription: Swift.String {
    get
  }
}
public func logLine(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func log(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func logerror(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public func logattention(_ message: Any, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line)
public struct VerifyApiLinks {
}
extension PingOneVerify.ClientBuilderError.BuilderError : Swift.Equatable {}
extension PingOneVerify.ClientBuilderError.BuilderError : Swift.Hashable {}
extension PingOneVerify.DocumentSubmissionStatus : Swift.Equatable {}
extension PingOneVerify.DocumentSubmissionStatus : Swift.Hashable {}
extension PingOneVerify.DocumentClass : Swift.Hashable {}
extension PingOneVerify.DocumentStatus : Swift.Equatable {}
extension PingOneVerify.DocumentStatus : Swift.Hashable {}
extension PingOneVerify.OtpStatus : Swift.Equatable {}
extension PingOneVerify.OtpStatus : Swift.Hashable {}
