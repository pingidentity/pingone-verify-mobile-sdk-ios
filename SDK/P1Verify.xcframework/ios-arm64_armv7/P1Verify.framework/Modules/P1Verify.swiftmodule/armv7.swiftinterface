// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name P1Verify
import CommunicationManager
import CoreImage
import CryptoTools
import Foundation
import JOSETools
import P1VerifyIDSchema
import Swift
import UIKit
public enum IdvError : Swift.Error {
  case cannotUpdatePushToken(_: Swift.String)
  case cannotValidateSubmittedData(_: Swift.String)
  case cannotInitializeIdvService(_: Swift.String)
  case cannotInitializeIdvStorageService(_: Swift.String)
  case cannotGetValidationStatus(_: Swift.String)
  case cannotSubmitData(_: Swift.String)
  case cannotUpdatePublicKeys(_: Swift.String)
  case cannotGetServicePublicKey(_: Swift.String)
  case cannotFindFaceOnDriverLicenseImage(_: Swift.String)
  case claimValidationFailed(_: Swift.String)
  case cannotValidateIssuedClaim(_: Swift.String)
  case invalidReponseFromIdvService(_: Swift.String)
  case missingJoseHelper(_: Swift.String)
  case failedToLoadSavedConfig(_: Swift.String)
}
extension IdvError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension IdvError : Swift.Equatable {
  public static func == (lhs: P1Verify.IdvError, rhs: P1Verify.IdvError) -> Swift.Bool
}
public enum VerifyStatus : Swift.String {
  case NOT_STARTED, REQUESTED, IN_PROGRESS, PARTIAL, SUCCESS, SUCCESS_MANUAL, APPROVED_NO_REQUEST, NOT_REQUIRED, FAIL
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension IdvService {
  @_hasMissingDesignatedInitializers public class Builder {
    public static func initWithNewConfig(for verificationCode: Swift.String) -> P1Verify.IdvService.Builder
    public static func initWithNewConfigFromQr(_ qrUrl: Swift.String) -> P1Verify.IdvService.Builder
    public static func initWithSavedConfig() -> P1Verify.IdvService.Builder
    @discardableResult
    public func setPushNotificationToken(_ pnToken: Foundation.Data) -> P1Verify.IdvService.Builder
    public func create(onComplete: @escaping (Swift.Result<P1Verify.IdvService, Swift.Error>) -> Swift.Void)
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class IdvService {
  public func setUniqueToken(_ uniqueToken: Swift.String)
  public func getStoredClaims() -> [P1Verify.Claim]
  public func submitDataForVerification(data: [P1VerifyIDSchema.IdCard], onComplete: @escaping (Swift.Result<P1Verify.VerifyStatus, P1Verify.IdvError>) -> Swift.Void)
  public func getVerificationStatus(onComplete: @escaping (Swift.Result<P1Verify.VerificationResult, P1Verify.IdvError>) -> Swift.Void)
  public func processNotification(userInfo: [Swift.AnyHashable : Any]?, onComplete: @escaping (Swift.Result<P1Verify.VerificationResult, P1Verify.IdvError>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VerificationResult {
  public func getTransactionId() -> Swift.String
  public func getValidationStatus() -> P1Verify.VerifyStatus
  public func getValidationClaims() -> [P1Verify.Claim]?
  public func getValidationErrors() -> [P1Verify.ProviderError]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Claim : P1VerifyIDSchema.JsonSerializable, Foundation.NSCopying {
  final public let id: Swift.String
  final public let createDate: Swift.String
  final public let issuer: P1Verify.SaltedData
  final public let holder: P1Verify.SaltedData
  final public let subject: P1Verify.SaltedData
  final public let referenceClaimId: P1Verify.SaltedData?
  final public let claimData: [P1Verify.SaltedData : P1Verify.SaltedData]
  final public let version: Swift.UInt8
  required convenience public init(dict: [Swift.String : Any]) throws
  public func getVersion() -> Swift.UInt8
  public func getId() -> Swift.String
  public func getCreateDate() -> Swift.String
  public func getIssuer() -> P1Verify.SaltedData
  public func getHolder() -> P1Verify.SaltedData
  public func getSubject() -> P1Verify.SaltedData
  public func getReferenceClaimId() -> P1Verify.SaltedData?
  public func getClaimSaltedData() -> [P1Verify.SaltedData : P1Verify.SaltedData]
  public func getClaimData() -> [Swift.String : Swift.String]
  public func getDataJson() -> Swift.String
  public func getDataSignature() -> Swift.String
  public func getDataHash() -> Swift.String
  public func getPartitionId() -> Swift.String?
  public func getTransactionId() -> Swift.String?
  override public func toDictionary() throws -> [Swift.String : Any]
  public func copyWithClaimData(_ claimData: [P1Verify.SaltedData : P1Verify.SaltedData]) -> P1Verify.Claim
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SaltedData : Swift.Hashable {
  final public let content: Swift.String
  final public let salt: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: P1Verify.SaltedData, rhs: P1Verify.SaltedData) -> Swift.Bool
public class Session : P1VerifyIDSchema.JsonSerializable {
  public init(sessionId: Swift.String, expiresAt: Foundation.TimeInterval)
  required convenience public init(dict: [Swift.String : Any]) throws
  public func getSessionId() -> Swift.String
  public func isExpired() -> Swift.Bool
  override public init()
  @objc deinit
}
public class ProviderError : P1VerifyIDSchema.JsonSerializable {
  required public init(dict: [Swift.String : Any]) throws
  public func getProviderId() -> Swift.String
  public func getProviderErrors() -> [Swift.String : Swift.String]
  @objc deinit
  override public init()
}
extension Formatter {
  public static let iso8601: Foundation.DateFormatter
}
extension Date {
  public var iso8601: Swift.String {
    get
  }
}
extension String {
  public var dateFromISO8601: Foundation.Date? {
    get
  }
}
extension P1Verify.VerifyStatus : Swift.Equatable {}
extension P1Verify.VerifyStatus : Swift.Hashable {}
extension P1Verify.VerifyStatus : Swift.RawRepresentable {}
